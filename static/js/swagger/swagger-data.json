{
    "swagger": "2.0",
    "info": {
        "title": "Vanilla API",
        "description": "API access to your community.",
        "version": "2.0-alpha"
    },
    "host": "dev.vanilla.localhost",
    "basePath": "/api/v2",
    "consumes": [
        "application/json",
        "application/x-www-form-urlencoded",
        "multipart/form-data"
    ],
    "paths": {
        "/addons": {
            "get": {
                "tags": [
                    "Addons"
                ],
                "summary": "List addons.",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "description": "<p>The type of addon.<br />\nMust be one of: \"addon\", \"theme\", \"locale\".</p>\n",
                        "enum": [
                            "addon",
                            "theme",
                            "locale"
                        ]
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "type": "boolean",
                        "description": "<p>Filter enabled or disabled addons.</p>\n"
                    },
                    {
                        "name": "themeType",
                        "in": "query",
                        "type": "string",
                        "description": "<p>Which theme to show the enabled status for.<br />\nMust be one of: \"desktop\", \"mobile\".</p>\n",
                        "enum": [
                            "desktop",
                            "mobile"
                        ],
                        "default": "desktop"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Addon"
                            }
                        }
                    }
                }
            }
        },
        "/addons/{addonID}": {
            "get": {
                "tags": [
                    "Addons"
                ],
                "summary": "Get an addon.",
                "parameters": [
                    {
                        "name": "addonID",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "minLength": 1,
                        "description": "<p>The ID of the addon.</p>\n"
                    },
                    {
                        "name": "themeType",
                        "in": "query",
                        "type": "string",
                        "description": "<p>Which theme to show the enabled status for.<br />\nMust be one of: \"desktop\", \"mobile\".</p>\n",
                        "enum": [
                            "desktop",
                            "mobile"
                        ],
                        "default": "desktop"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Addon"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Addons"
                ],
                "summary": "Enable or disable an addon.",
                "parameters": [
                    {
                        "name": "addonID",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "minLength": 1,
                        "description": "The ID of the addon."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable or disable the addon."
                                },
                                "themeType": {
                                    "type": "string",
                                    "description": "Which theme type to set.",
                                    "enum": [
                                        "desktop",
                                        "mobile"
                                    ],
                                    "default": "desktop"
                                }
                            },
                            "required": [
                                "enabled"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Addon"
                            }
                        }
                    }
                }
            }
        },
        "/badges": {
            "get": {
                "tags": [
                    "Badges"
                ],
                "summary": "List badges.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser",
                                "updateUser"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Badge"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Badges"
                ],
                "summary": "Create a custom badge.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BadgePost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Badge"
                        }
                    }
                }
            }
        },
        "/badges/requests": {
            "get": {
                "tags": [
                    "Badges"
                ],
                "summary": "List badge requests.",
                "parameters": [
                    {
                        "name": "badgeID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by badge ID</p>\n"
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by user ID</p>\n"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "user",
                                "badge",
                                "insertUser"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BadgeRequest"
                            }
                        }
                    }
                }
            }
        },
        "/badges/users": {
            "get": {
                "tags": [
                    "Badges"
                ],
                "summary": "List all the users that have the badge.",
                "parameters": [
                    {
                        "name": "badgeID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by badge ID</p>\n"
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by user ID</p>\n"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "user",
                                "badge",
                                "insertUser"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserBadge"
                            }
                        }
                    }
                }
            }
        },
        "/badges/{id}": {
            "get": {
                "tags": [
                    "Badges"
                ],
                "summary": "Get a badge.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The badge ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Badge"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Badges"
                ],
                "summary": "Update a badge.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The badge ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BadgePost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Badge"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Badges"
                ],
                "summary": "Delete a custom badge.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The badge ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/badges/{id}/edit": {
            "get": {
                "tags": [
                    "Badges"
                ],
                "summary": "Get a badge for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The badge ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Badge"
                        }
                    }
                }
            }
        },
        "/badges/{id}/requests": {
            "post": {
                "tags": [
                    "Badges"
                ],
                "summary": "Request a badge.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The badge ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BadgeRequestPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BadgeRequest"
                        }
                    }
                }
            }
        },
        "/badges/{id}/requests/{userID}": {
            "delete": {
                "tags": [
                    "Badges"
                ],
                "summary": "Delete the badge request of a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The badge ID.</p>\n"
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "default": null,
                        "type": "integer",
                        "description": "<p>The user ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/badges/{id}/users": {
            "post": {
                "tags": [
                    "Badges"
                ],
                "summary": "Give a badge to a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The badge ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserBadgePost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserBadge"
                        }
                    }
                }
            }
        },
        "/badges/{id}/users/{userID}": {
            "delete": {
                "tags": [
                    "Badges"
                ],
                "summary": "Remove a badge from a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The badge ID.</p>\n"
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The user ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "List categories.",
                "parameters": [
                    {
                        "name": "parentCategoryID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Parent category ID.</p>\n"
                    },
                    {
                        "name": "parentCategoryCode",
                        "in": "query",
                        "type": "string",
                        "description": "<p>Parent category URL code.</p>\n"
                    },
                    {
                        "name": "followed",
                        "in": "query",
                        "type": "boolean",
                        "default": false,
                        "description": "<p>Only list categories followed by the current user.</p>\n",
                        "required": true
                    },
                    {
                        "name": "maxDepth",
                        "in": "query",
                        "type": "integer",
                        "description": "\n",
                        "default": 2
                    },
                    {
                        "name": "archived",
                        "in": "query",
                        "type": [
                            "boolean",
                            "null"
                        ],
                        "description": "<p>Filter by archived status of a category. True for archived only. False for no archived categories. Not compatible with followed filter.</p>\n",
                        "default": false,
                        "required": true
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. Works with flat and followed categories. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a></p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "categoryID": {
                                        "type": "integer",
                                        "description": "The ID of the category."
                                    },
                                    "name": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The name of the category."
                                    },
                                    "description": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "minLength": 0,
                                        "description": "The description of the category."
                                    },
                                    "parentCategoryID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "Parent category ID."
                                    },
                                    "customPermissions": {
                                        "type": "boolean",
                                        "description": "Are custom permissions set for this category?"
                                    },
                                    "isArchived": {
                                        "type": "boolean",
                                        "description": "The archived state of this category."
                                    },
                                    "urlcode": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The URL code of the category."
                                    },
                                    "url": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The URL to the category."
                                    },
                                    "displayAs": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The display style of the category.",
                                        "enum": [
                                            "categories",
                                            "discussions",
                                            "flat",
                                            "heading"
                                        ],
                                        "default": "discussions"
                                    },
                                    "countCategories": {
                                        "type": "integer",
                                        "description": "Total number of child categories."
                                    },
                                    "countDiscussions": {
                                        "type": "integer",
                                        "description": "Total discussions in the category."
                                    },
                                    "countComments": {
                                        "type": "integer",
                                        "description": "Total comments in the category."
                                    },
                                    "countAllDiscussions": {
                                        "type": "integer",
                                        "description": "Total of all discussions in a category and its children."
                                    },
                                    "countAllComments": {
                                        "type": "integer",
                                        "description": "Total of all comments in a category and its children."
                                    },
                                    "followed": {
                                        "type": "boolean",
                                        "description": "Is the category being followed by the current user?"
                                    },
                                    "depth": {
                                        "type": "integer"
                                    },
                                    "children": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "categoryID": {
                                                    "type": "integer",
                                                    "description": "The ID of the category."
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "description": "The name of the category."
                                                },
                                                "description": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "minLength": 0,
                                                    "description": "The description of the category."
                                                },
                                                "parentCategoryID": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ],
                                                    "description": "Parent category ID."
                                                },
                                                "customPermissions": {
                                                    "type": "boolean",
                                                    "description": "Are custom permissions set for this category?"
                                                },
                                                "isArchived": {
                                                    "type": "boolean",
                                                    "description": "The archived state of this category."
                                                },
                                                "urlcode": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "description": "The URL code of the category."
                                                },
                                                "url": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "description": "The URL to the category."
                                                },
                                                "displayAs": {
                                                    "type": "string",
                                                    "minLength": 1,
                                                    "description": "The display style of the category.",
                                                    "enum": [
                                                        "categories",
                                                        "discussions",
                                                        "flat",
                                                        "heading"
                                                    ],
                                                    "default": "discussions"
                                                },
                                                "countCategories": {
                                                    "type": "integer",
                                                    "description": "Total number of child categories."
                                                },
                                                "countDiscussions": {
                                                    "type": "integer",
                                                    "description": "Total discussions in the category."
                                                },
                                                "countComments": {
                                                    "type": "integer",
                                                    "description": "Total comments in the category."
                                                },
                                                "countAllDiscussions": {
                                                    "type": "integer",
                                                    "description": "Total of all discussions in a category and its children."
                                                },
                                                "countAllComments": {
                                                    "type": "integer",
                                                    "description": "Total of all comments in a category and its children."
                                                },
                                                "followed": {
                                                    "type": "boolean",
                                                    "description": "Is the category being followed by the current user?"
                                                },
                                                "depth": {
                                                    "type": "integer"
                                                },
                                                "children": {
                                                    "type": "array"
                                                }
                                            },
                                            "required": [
                                                "categoryID",
                                                "name",
                                                "description",
                                                "parentCategoryID",
                                                "customPermissions",
                                                "isArchived",
                                                "urlcode",
                                                "url",
                                                "displayAs",
                                                "countCategories",
                                                "countDiscussions",
                                                "countComments",
                                                "countAllDiscussions",
                                                "countAllComments",
                                                "depth",
                                                "children"
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "categoryID",
                                    "name",
                                    "description",
                                    "parentCategoryID",
                                    "customPermissions",
                                    "isArchived",
                                    "urlcode",
                                    "url",
                                    "displayAs",
                                    "countCategories",
                                    "countDiscussions",
                                    "countComments",
                                    "countAllDiscussions",
                                    "countAllComments",
                                    "depth"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Add a category.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CategoryPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "categoryID": {
                                    "type": "integer",
                                    "description": "The ID of the category."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the category."
                                },
                                "description": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "The description of the category."
                                },
                                "parentCategoryID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Parent category ID."
                                },
                                "customPermissions": {
                                    "type": "boolean",
                                    "description": "Are custom permissions set for this category?"
                                },
                                "isArchived": {
                                    "type": "boolean",
                                    "description": "The archived state of this category."
                                },
                                "urlcode": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL code of the category."
                                },
                                "url": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL to the category."
                                },
                                "displayAs": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The display style of the category.",
                                    "enum": [
                                        "categories",
                                        "discussions",
                                        "flat",
                                        "heading"
                                    ],
                                    "default": "discussions"
                                },
                                "countCategories": {
                                    "type": "integer",
                                    "description": "Total number of child categories."
                                },
                                "countDiscussions": {
                                    "type": "integer",
                                    "description": "Total discussions in the category."
                                },
                                "countComments": {
                                    "type": "integer",
                                    "description": "Total comments in the category."
                                },
                                "countAllDiscussions": {
                                    "type": "integer",
                                    "description": "Total of all discussions in a category and its children."
                                },
                                "countAllComments": {
                                    "type": "integer",
                                    "description": "Total of all comments in a category and its children."
                                },
                                "followed": {
                                    "type": "boolean",
                                    "description": "Is the category being followed by the current user?"
                                }
                            },
                            "required": [
                                "categoryID",
                                "name",
                                "description",
                                "parentCategoryID",
                                "customPermissions",
                                "isArchived",
                                "urlcode",
                                "url",
                                "displayAs",
                                "countCategories",
                                "countDiscussions",
                                "countComments",
                                "countAllDiscussions",
                                "countAllComments"
                            ]
                        }
                    }
                }
            }
        },
        "/categories/search": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Search categories.",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "type": "string",
                        "minLength": 1,
                        "description": "<p>Category name filter.</p>\n",
                        "required": true
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 200
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "default": false,
                        "description": "<p>Expand with the parent record.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "categoryID": {
                                        "type": "integer",
                                        "description": "The ID of the category."
                                    },
                                    "name": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The name of the category."
                                    },
                                    "description": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "minLength": 0,
                                        "description": "The description of the category."
                                    },
                                    "parentCategoryID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "Parent category ID."
                                    },
                                    "customPermissions": {
                                        "type": "boolean",
                                        "description": "Are custom permissions set for this category?"
                                    },
                                    "isArchived": {
                                        "type": "boolean",
                                        "description": "The archived state of this category."
                                    },
                                    "urlcode": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The URL code of the category."
                                    },
                                    "url": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The URL to the category."
                                    },
                                    "displayAs": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The display style of the category.",
                                        "enum": [
                                            "categories",
                                            "discussions",
                                            "flat",
                                            "heading"
                                        ],
                                        "default": "discussions"
                                    },
                                    "countCategories": {
                                        "type": "integer",
                                        "description": "Total number of child categories."
                                    },
                                    "countDiscussions": {
                                        "type": "integer",
                                        "description": "Total discussions in the category."
                                    },
                                    "countComments": {
                                        "type": "integer",
                                        "description": "Total comments in the category."
                                    },
                                    "countAllDiscussions": {
                                        "type": "integer",
                                        "description": "Total of all discussions in a category and its children."
                                    },
                                    "countAllComments": {
                                        "type": "integer",
                                        "description": "Total of all comments in a category and its children."
                                    },
                                    "followed": {
                                        "type": "boolean",
                                        "description": "Is the category being followed by the current user?"
                                    }
                                },
                                "required": [
                                    "categoryID",
                                    "name",
                                    "description",
                                    "parentCategoryID",
                                    "customPermissions",
                                    "isArchived",
                                    "urlcode",
                                    "url",
                                    "displayAs",
                                    "countCategories",
                                    "countDiscussions",
                                    "countComments",
                                    "countAllDiscussions",
                                    "countAllComments"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The category ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "categoryID": {
                                    "type": "integer",
                                    "description": "The ID of the category."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the category."
                                },
                                "description": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "The description of the category."
                                },
                                "parentCategoryID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Parent category ID."
                                },
                                "customPermissions": {
                                    "type": "boolean",
                                    "description": "Are custom permissions set for this category?"
                                },
                                "isArchived": {
                                    "type": "boolean",
                                    "description": "The archived state of this category."
                                },
                                "urlcode": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL code of the category."
                                },
                                "url": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL to the category."
                                },
                                "displayAs": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The display style of the category.",
                                    "enum": [
                                        "categories",
                                        "discussions",
                                        "flat",
                                        "heading"
                                    ],
                                    "default": "discussions"
                                },
                                "countCategories": {
                                    "type": "integer",
                                    "description": "Total number of child categories."
                                },
                                "countDiscussions": {
                                    "type": "integer",
                                    "description": "Total discussions in the category."
                                },
                                "countComments": {
                                    "type": "integer",
                                    "description": "Total comments in the category."
                                },
                                "countAllDiscussions": {
                                    "type": "integer",
                                    "description": "Total of all discussions in a category and its children."
                                },
                                "countAllComments": {
                                    "type": "integer",
                                    "description": "Total of all comments in a category and its children."
                                },
                                "followed": {
                                    "type": "boolean",
                                    "description": "Is the category being followed by the current user?"
                                }
                            },
                            "required": [
                                "categoryID",
                                "name",
                                "description",
                                "parentCategoryID",
                                "customPermissions",
                                "isArchived",
                                "urlcode",
                                "url",
                                "displayAs",
                                "countCategories",
                                "countDiscussions",
                                "countComments",
                                "countAllDiscussions",
                                "countAllComments"
                            ]
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update a category.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The category ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CategoryPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "categoryID": {
                                    "type": "integer",
                                    "description": "The ID of the category."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the category."
                                },
                                "description": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "The description of the category."
                                },
                                "parentCategoryID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Parent category ID."
                                },
                                "customPermissions": {
                                    "type": "boolean",
                                    "description": "Are custom permissions set for this category?"
                                },
                                "isArchived": {
                                    "type": "boolean",
                                    "description": "The archived state of this category."
                                },
                                "urlcode": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL code of the category."
                                },
                                "url": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL to the category."
                                },
                                "displayAs": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The display style of the category.",
                                    "enum": [
                                        "categories",
                                        "discussions",
                                        "flat",
                                        "heading"
                                    ],
                                    "default": "discussions"
                                },
                                "countCategories": {
                                    "type": "integer",
                                    "description": "Total number of child categories."
                                },
                                "countDiscussions": {
                                    "type": "integer",
                                    "description": "Total discussions in the category."
                                },
                                "countComments": {
                                    "type": "integer",
                                    "description": "Total comments in the category."
                                },
                                "countAllDiscussions": {
                                    "type": "integer",
                                    "description": "Total of all discussions in a category and its children."
                                },
                                "countAllComments": {
                                    "type": "integer",
                                    "description": "Total of all comments in a category and its children."
                                },
                                "followed": {
                                    "type": "boolean",
                                    "description": "Is the category being followed by the current user?"
                                }
                            },
                            "required": [
                                "categoryID",
                                "name",
                                "description",
                                "parentCategoryID",
                                "customPermissions",
                                "isArchived",
                                "urlcode",
                                "url",
                                "displayAs",
                                "countCategories",
                                "countDiscussions",
                                "countComments",
                                "countAllDiscussions",
                                "countAllComments"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The category ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/categories/{id}/edit": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The category ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "categoryID": {
                                    "type": "integer",
                                    "description": "The ID of the category."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the category."
                                },
                                "parentCategoryID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Parent category ID."
                                },
                                "urlcode": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL code of the category."
                                },
                                "description": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "The description of the category."
                                },
                                "displayAs": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The display style of the category.",
                                    "enum": [
                                        "categories",
                                        "discussions",
                                        "flat",
                                        "heading"
                                    ],
                                    "default": "discussions"
                                }
                            },
                            "required": [
                                "categoryID",
                                "name",
                                "parentCategoryID",
                                "urlcode",
                                "description",
                                "displayAs"
                            ]
                        }
                    }
                }
            }
        },
        "/categories/{id}/follow": {
            "put": {
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "followed": {
                                    "type": "boolean",
                                    "description": "The category-follow status for the current user."
                                }
                            },
                            "required": [
                                "followed"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "followed": {
                                    "type": "boolean",
                                    "description": "The category-follow status for the current user."
                                }
                            },
                            "required": [
                                "followed"
                            ]
                        }
                    }
                }
            }
        },
        "/comments": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "List comments.",
                "parameters": [
                    {
                        "name": "dateInserted",
                        "in": "query",
                        "type": "object",
                        "properties": {
                            "operator": {
                                "type": "string",
                                "default": "=",
                                "enum": [
                                    "=",
                                    ">",
                                    "<",
                                    ">=",
                                    "<=",
                                    "[]",
                                    "[)",
                                    "(]",
                                    "()"
                                ]
                            },
                            "date": {
                                "type": "array",
                                "minItems": 1,
                                "mixItems": 2,
                                "items": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        },
                        "description": "<p>When the comment was created.<br />\nThis filter receive a string that can take two forms.<br />\nA single date that matches '{Operator}{DateTime}' where {Operator} can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to =.<br />\nA date range that matches '{Opening}{DateTime},{DateTime}{Closing}' where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'. '[]' are inclusive and '()' are exclusive.</p>\n",
                        "x-filter": {
                            "field": "c.DateInserted",
                            "processor": [
                                "Vanilla\\DateFilterSchema",
                                "dateFilterField"
                            ]
                        }
                    },
                    {
                        "name": "dateUpdated",
                        "in": "query",
                        "type": "object",
                        "properties": {
                            "operator": {
                                "type": "string",
                                "default": "=",
                                "enum": [
                                    "=",
                                    ">",
                                    "<",
                                    ">=",
                                    "<=",
                                    "[]",
                                    "[)",
                                    "(]",
                                    "()"
                                ]
                            },
                            "date": {
                                "type": "array",
                                "minItems": 1,
                                "mixItems": 2,
                                "items": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        },
                        "description": "<p>When the comment was updated.<br />\nThis filter receive a string that can take two forms.<br />\nA single date that matches '{Operator}{DateTime}' where {Operator} can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to =.<br />\nA date range that matches '{Opening}{DateTime},{DateTime}{Closing}' where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'. '[]' are inclusive and '()' are exclusive.</p>\n",
                        "x-filter": {
                            "field": "c.DateUpdated",
                            "processor": [
                                "Vanilla\\DateFilterSchema",
                                "dateFilterField"
                            ]
                        }
                    },
                    {
                        "name": "discussionID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>The discussion ID.</p>\n",
                        "x-filter": {
                            "field": "DiscussionID",
                            "processor": {}
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": "30",
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "insertUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by author.</p>\n",
                        "x-filter": {
                            "field": "InsertUserID"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser",
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Comment"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Comments"
                ],
                "summary": "Add a comment.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CommentPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    }
                }
            }
        },
        "/comments/search": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "Search comments.",
                "parameters": [
                    {
                        "name": "categoryID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>The numeric ID of a category.</p>\n"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "type": "string",
                        "minLength": 1,
                        "description": "<p>Search terms.</p>\n",
                        "required": true
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "default": false,
                        "description": "<p>Expand associated records.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Comment"
                            }
                        }
                    }
                }
            }
        },
        "/comments/{id}": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "Get a comment.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The comment ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Comments"
                ],
                "summary": "Update a comment.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The comment ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CommentPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Comments"
                ],
                "summary": "Delete a comment.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The comment ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/comments/{id}/answer": {
            "patch": {
                "tags": [
                    "Comments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CommentGet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    }
                }
            }
        },
        "/comments/{id}/edit": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "Get a comment for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The comment ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "commentID": {
                                    "type": "integer",
                                    "description": "The ID of the comment."
                                },
                                "discussionID": {
                                    "type": "integer",
                                    "description": "The ID of the discussion."
                                },
                                "body": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The body of the comment."
                                },
                                "format": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The input format of the comment."
                                }
                            },
                            "required": [
                                "commentID",
                                "discussionID",
                                "body",
                                "format"
                            ]
                        }
                    }
                }
            }
        },
        "/comments/{id}/reactions": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "Get reactions to a comment.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The comment ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": [
                            "string",
                            "null"
                        ],
                        "minLength": 1,
                        "default": null,
                        "description": "<p>Filter to a specific reaction type by using its URL code.</p>\n",
                        "required": true
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "recordType": {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "recordID": {
                                        "type": "integer"
                                    },
                                    "tagID": {
                                        "type": "integer"
                                    },
                                    "userID": {
                                        "type": "integer"
                                    },
                                    "dateInserted": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "user": {
                                        "$ref": "#/definitions/UserFragment"
                                    },
                                    "reactionType": {
                                        "type": "object",
                                        "properties": {
                                            "tagID": {
                                                "type": "integer"
                                            },
                                            "urlcode": {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "class": {
                                                "type": "string",
                                                "minLength": 1
                                            }
                                        },
                                        "required": [
                                            "tagID",
                                            "urlcode",
                                            "name",
                                            "class"
                                        ]
                                    }
                                },
                                "required": [
                                    "recordType",
                                    "recordID",
                                    "tagID",
                                    "userID",
                                    "dateInserted",
                                    "user",
                                    "reactionType"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Comments"
                ],
                "summary": "React to a comment.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "reactionType": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "URL code of a reaction type."
                                }
                            },
                            "required": [
                                "reactionType"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "tagID": {
                                        "type": "integer"
                                    },
                                    "urlcode": {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "class": {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "count": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "tagID",
                                    "urlcode",
                                    "name",
                                    "class",
                                    "count"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/comments/{id}/reactions/{userID}": {
            "delete": {
                "tags": [
                    "Comments"
                ],
                "summary": "Remove a user's reaction.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The comment ID.</p>\n"
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "required": true,
                        "default": null,
                        "type": "integer",
                        "description": "<p>The target user ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/conversations": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "summary": "List user conversations.",
                "parameters": [
                    {
                        "name": "insertUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by author.</p>\n"
                    },
                    {
                        "name": "participantUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by participating user. (Has no effect if insertUserID is used)</p>\n"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": "50",
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser",
                                "lastInsertUser"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Conversation"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Add a conversation.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConversationPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Conversation"
                        }
                    }
                }
            }
        },
        "/conversations/{id}": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Get a conversation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The conversation ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Conversation"
                        }
                    }
                }
            }
        },
        "/conversations/{id}/leave": {
            "delete": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Leave a conversation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The conversation ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/conversations/{id}/participants": {
            "get": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Get participants of a conversation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The conversation ID.</p>\n"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "description": "<p>Filter by participant status.<br />\nMust be one of: \"all\", \"participating\", \"deleted\".</p>\n",
                        "enum": [
                            "all",
                            "participating",
                            "deleted"
                        ],
                        "default": "participating"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 5,
                        "minimum": 5,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "user"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of participants.",
                        "schema": {
                            "$ref": "#/definitions/ConversationParticipants"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Conversations"
                ],
                "summary": "Add participants to a conversation.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The conversation ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConversationPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of participants.",
                        "schema": {
                            "$ref": "#/definitions/ConversationParticipants"
                        }
                    }
                }
            }
        },
        "/discussions": {
            "get": {
                "tags": [
                    "Discussions"
                ],
                "summary": "List discussions.",
                "parameters": [
                    {
                        "name": "categoryID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by a category.</p>\n",
                        "x-filter": {
                            "field": "d.CategoryID"
                        }
                    },
                    {
                        "name": "dateInserted",
                        "in": "query",
                        "type": "object",
                        "properties": {
                            "operator": {
                                "type": "string",
                                "default": "=",
                                "enum": [
                                    "=",
                                    ">",
                                    "<",
                                    ">=",
                                    "<=",
                                    "[]",
                                    "[)",
                                    "(]",
                                    "()"
                                ]
                            },
                            "date": {
                                "type": "array",
                                "minItems": 1,
                                "mixItems": 2,
                                "items": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        },
                        "description": "<p>When the discussion was created.<br />\nThis filter receive a string that can take two forms.<br />\nA single date that matches '{Operator}{DateTime}' where {Operator} can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to =.<br />\nA date range that matches '{Opening}{DateTime},{DateTime}{Closing}' where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'. '[]' are inclusive and '()' are exclusive.</p>\n",
                        "x-filter": {
                            "field": "d.DateInserted",
                            "processor": [
                                "Vanilla\\DateFilterSchema",
                                "dateFilterField"
                            ]
                        }
                    },
                    {
                        "name": "dateUpdated",
                        "in": "query",
                        "type": "object",
                        "properties": {
                            "operator": {
                                "type": "string",
                                "default": "=",
                                "enum": [
                                    "=",
                                    ">",
                                    "<",
                                    ">=",
                                    "<=",
                                    "[]",
                                    "[)",
                                    "(]",
                                    "()"
                                ]
                            },
                            "date": {
                                "type": "array",
                                "minItems": 1,
                                "mixItems": 2,
                                "items": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        },
                        "description": "<p>When the discussion was updated.<br />\nThis filter receive a string that can take two forms.<br />\nA single date that matches '{Operator}{DateTime}' where {Operator} can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to =.<br />\nA date range that matches '{Opening}{DateTime},{DateTime}{Closing}' where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'. '[]' are inclusive and '()' are exclusive.</p>\n",
                        "x-filter": {
                            "field": "d.DateUpdated",
                            "processor": [
                                "Vanilla\\DateFilterSchema",
                                "dateFilterField"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "description": "<p>Filter by discussion type.</p>\n",
                        "x-filter": {
                            "field": "d.Type"
                        }
                    },
                    {
                        "name": "followed",
                        "in": "query",
                        "type": "boolean",
                        "default": false,
                        "description": "<p>Only fetch discussions from followed categories. Pinned discussions are mixed in.</p>\n",
                        "required": true
                    },
                    {
                        "name": "pinned",
                        "in": "query",
                        "type": "boolean",
                        "description": "<p>Whether or not to include pinned discussions. If true, only return pinned discussions. Cannot be used with the pinOrder parameter.</p>\n"
                    },
                    {
                        "name": "pinOrder",
                        "in": "query",
                        "type": "string",
                        "default": "first",
                        "description": "<p>If including pinned posts, in what order should they be integrated? When \"first\", discussions pinned to a specific category will only be affected if the discussion's category is passed as the categoryID parameter. Cannot be used with the pinned parameter.<br />\nMust be one of: \"first\", \"mixed\".</p>\n",
                        "enum": [
                            "first",
                            "mixed"
                        ]
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "insertUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by author.</p>\n",
                        "x-filter": {
                            "field": "d.InsertUserID"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser",
                                "lastUser",
                                "lastPost",
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    },
                    {
                        "name": "groupID",
                        "in": "query",
                        "type": [
                            "integer",
                            "null"
                        ],
                        "description": "<p>The group the discussion is in.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Discussion"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Add a discussion.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscussionPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Discussion"
                        }
                    }
                }
            }
        },
        "/discussions/bookmarked": {
            "get": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Get a list of the current user's bookmarked discussions.",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser",
                                "lastUser",
                                "lastPost"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Discussion"
                            }
                        }
                    }
                }
            }
        },
        "/discussions/idea": {
            "post": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Add an idea.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscussionPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Discussion"
                        }
                    }
                }
            }
        },
        "/discussions/question": {
            "post": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Add a discussion.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscussionPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Discussion"
                        }
                    }
                }
            }
        },
        "/discussions/search": {
            "get": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Search discussions.",
                "parameters": [
                    {
                        "name": "categoryID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>The numeric ID of a category to limit search results to.</p>\n"
                    },
                    {
                        "name": "followed",
                        "in": "query",
                        "type": "boolean",
                        "description": "<p>Limit results to those in followed categories. Cannot be used with the categoryID parameter.</p>\n"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "type": "string",
                        "minLength": 1,
                        "description": "<p>Search terms.</p>\n",
                        "required": true
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "default": false,
                        "description": "<p>Expand associated records.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Discussion"
                            }
                        }
                    }
                }
            }
        },
        "/discussions/{id}": {
            "get": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Get a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The discussion ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Discussion"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Update a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The discussion ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscussionPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Discussion"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Delete a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The discussion ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/discussions/{id}/bookmark": {
            "put": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Bookmark a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The discussion ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "bookmarked": {
                                    "type": "boolean",
                                    "description": "Pass true to bookmark or false to remove bookmark."
                                }
                            },
                            "required": [
                                "bookmarked"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "bookmarked": {
                                    "type": "boolean",
                                    "description": "The current bookmark value."
                                }
                            },
                            "required": [
                                "bookmarked"
                            ]
                        }
                    }
                }
            }
        },
        "/discussions/{id}/edit": {
            "get": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Get a discussion for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The discussion ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DiscussionGetEdit"
                        }
                    }
                }
            }
        },
        "/discussions/{id}/idea": {
            "patch": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Update idea metadata on a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "statusID": {
                                    "type": "integer",
                                    "description": "Idea status ID."
                                },
                                "statusNotes": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Notes on a status change. Notes will persist until overwritten."
                                }
                            },
                            "required": [
                                "statusID",
                                "statusNotes"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "statusID": {
                                    "type": "integer",
                                    "description": "Idea status ID."
                                },
                                "statusNotes": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Notes on a status change. Notes will persist until overwritten."
                                }
                            },
                            "required": [
                                "statusID",
                                "statusNotes"
                            ]
                        }
                    }
                }
            }
        },
        "/discussions/{id}/reactions": {
            "get": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Get reactions to a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The discussion ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": [
                            "string",
                            "null"
                        ],
                        "minLength": 1,
                        "default": null,
                        "description": "<p>Filter to a specific reaction type by using its URL code.</p>\n",
                        "required": true
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "recordType": {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "recordID": {
                                        "type": "integer"
                                    },
                                    "tagID": {
                                        "type": "integer"
                                    },
                                    "userID": {
                                        "type": "integer"
                                    },
                                    "dateInserted": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "user": {
                                        "$ref": "#/definitions/UserFragment"
                                    },
                                    "reactionType": {
                                        "type": "object",
                                        "properties": {
                                            "tagID": {
                                                "type": "integer"
                                            },
                                            "urlcode": {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "class": {
                                                "type": "string",
                                                "minLength": 1
                                            }
                                        },
                                        "required": [
                                            "tagID",
                                            "urlcode",
                                            "name",
                                            "class"
                                        ]
                                    }
                                },
                                "required": [
                                    "recordType",
                                    "recordID",
                                    "tagID",
                                    "userID",
                                    "dateInserted",
                                    "user",
                                    "reactionType"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Discussions"
                ],
                "summary": "React to a discussion.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "reactionType": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "URL code of a reaction type."
                                }
                            },
                            "required": [
                                "reactionType"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "tagID": {
                                        "type": "integer"
                                    },
                                    "urlcode": {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "class": {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "count": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "tagID",
                                    "urlcode",
                                    "name",
                                    "class",
                                    "count"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/discussions/{id}/reactions/{userID}": {
            "delete": {
                "tags": [
                    "Discussions"
                ],
                "summary": "Remove a user's reaction.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The discussion ID.</p>\n"
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "required": true,
                        "default": null,
                        "type": "integer",
                        "description": "<p>The target user ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "reactions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/drafts": {
            "get": {
                "tags": [
                    "Drafts"
                ],
                "summary": "List drafts created by the current user.",
                "parameters": [
                    {
                        "name": "recordType",
                        "in": "query",
                        "type": "string",
                        "description": "<p>Filter drafts by record type.<br />\nMust be one of: \"comment\", \"discussion\".</p>\n",
                        "enum": [
                            "comment",
                            "discussion"
                        ]
                    },
                    {
                        "name": "parentRecordID",
                        "in": "query",
                        "type": [
                            "integer",
                            "null"
                        ],
                        "description": "<p>Filter by the unique ID of the parent for a draft. Used with recordType.</p>\n",
                        "default": null
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "draftID": {
                                        "type": "integer",
                                        "description": "The unique ID of the draft."
                                    },
                                    "recordType": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The type of record associated with this draft.",
                                        "enum": [
                                            "comment",
                                            "discussion"
                                        ]
                                    },
                                    "parentRecordID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "The unique ID of the intended parent to this record."
                                    },
                                    "attributes": {
                                        "type": "object",
                                        "description": "A free-form object containing all custom data for this draft."
                                    },
                                    "insertUserID": {
                                        "type": "integer",
                                        "description": "The unique ID of the user who created this draft."
                                    },
                                    "dateInserted": {
                                        "type": "string",
                                        "description": "When the draft was created.",
                                        "format": "date-time"
                                    },
                                    "updateUserID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "The unique ID of the user who updated this draft."
                                    },
                                    "dateUpdated": {
                                        "type": [
                                            "datetime",
                                            "null"
                                        ],
                                        "description": "When the draft was updated."
                                    }
                                },
                                "required": [
                                    "draftID",
                                    "recordType",
                                    "parentRecordID",
                                    "attributes",
                                    "insertUserID",
                                    "dateInserted",
                                    "updateUserID",
                                    "dateUpdated"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Drafts"
                ],
                "summary": "Create a draft.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DraftPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "draftID": {
                                    "type": "integer",
                                    "description": "The unique ID of the draft."
                                },
                                "recordType": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The type of record associated with this draft.",
                                    "enum": [
                                        "comment",
                                        "discussion"
                                    ]
                                },
                                "parentRecordID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the intended parent to this record."
                                },
                                "attributes": {
                                    "type": "object",
                                    "description": "A free-form object containing all custom data for this draft."
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The unique ID of the user who created this draft."
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the draft was created.",
                                    "format": "date-time"
                                },
                                "updateUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the user who updated this draft."
                                },
                                "dateUpdated": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the draft was updated."
                                }
                            },
                            "required": [
                                "draftID",
                                "recordType",
                                "parentRecordID",
                                "attributes",
                                "insertUserID",
                                "dateInserted",
                                "updateUserID",
                                "dateUpdated"
                            ]
                        }
                    }
                }
            }
        },
        "/drafts/{id}": {
            "get": {
                "tags": [
                    "Drafts"
                ],
                "summary": "Get a draft.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The draft ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "draftID": {
                                    "type": "integer",
                                    "description": "The unique ID of the draft."
                                },
                                "recordType": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The type of record associated with this draft.",
                                    "enum": [
                                        "comment",
                                        "discussion"
                                    ]
                                },
                                "parentRecordID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the intended parent to this record."
                                },
                                "attributes": {
                                    "type": "object",
                                    "description": "A free-form object containing all custom data for this draft."
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The unique ID of the user who created this draft."
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the draft was created.",
                                    "format": "date-time"
                                },
                                "updateUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the user who updated this draft."
                                },
                                "dateUpdated": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the draft was updated."
                                }
                            },
                            "required": [
                                "draftID",
                                "recordType",
                                "parentRecordID",
                                "attributes",
                                "insertUserID",
                                "dateInserted",
                                "updateUserID",
                                "dateUpdated"
                            ]
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Drafts"
                ],
                "summary": "Update a draft.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The draft ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DraftPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "draftID": [],
                                "parentRecordID": [],
                                "attributes": []
                            },
                            "required": [
                                "draftID",
                                "parentRecordID",
                                "attributes"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Drafts"
                ],
                "summary": "Delete a draft.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The draft ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/drafts/{id}/edit": {
            "get": {
                "tags": [
                    "Drafts"
                ],
                "summary": "Get a draft for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The draft ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "draftID": [],
                                "parentRecordID": [],
                                "attributes": []
                            },
                            "required": [
                                "draftID",
                                "parentRecordID",
                                "attributes"
                            ]
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "List events.",
                "parameters": [
                    {
                        "name": "groupID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by group ID.</p>\n",
                        "required": true
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "dateInserted",
                            "-dateInserted",
                            "dateStarts",
                            "-dateStarts"
                        ],
                        "description": "<p>Sort the results by the specified field. The default sort order is ascending.Prefixing the field with \"-\" will sort using a descending order.<br />\nMust be one of: \"dateInserted\", \"-dateInserted\", \"dateStarts\", \"-dateStarts\".</p>\n"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "<p>Expand associated records.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Event"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Create an event.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EventPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get an event.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The event ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Events"
                ],
                "summary": "Update an event.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The event ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EventPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Events"
                ],
                "summary": "Delete an event.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The event ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/events/{id}/edit": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get an event for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The event ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                }
            }
        },
        "/events/{id}/participants": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get event's participants.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The event ID.</p>\n"
                    },
                    {
                        "name": "attending",
                        "in": "query",
                        "type": "string",
                        "default": "all",
                        "enum": [
                            "yes",
                            "no",
                            "maybe",
                            "answered",
                            "unanswered",
                            "all"
                        ],
                        "description": "<p>Filter participant by attending status.<br />\nMust be one of: \"yes\", \"no\", \"maybe\", \"answered\", \"unanswered\", \"all\".</p>\n"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "<p>Expand associated records.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Event"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "RSVP to an event.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The event ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": {
                                    "type": "string",
                                    "description": "The ID of the user that RSVP."
                                },
                                "attending": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "enum": [
                                        "yes",
                                        "no",
                                        "maybe"
                                    ],
                                    "description": "Is the participant attending the event."
                                }
                            },
                            "required": [
                                "attending"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    }
                }
            }
        },
        "/groups": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "List groups.",
                "parameters": [
                    {
                        "name": "memberID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by member userID.</p>\n"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "dateInserted",
                            "-dateInserted",
                            "dateLastComment",
                            "-dateLastComment",
                            "countMembers",
                            "-countMembers",
                            "countDiscussions",
                            "-countDiscussions"
                        ],
                        "description": "<p>Sort the results by the specified field. The default sort order is ascending.Prefixing the field with \"-\" will sort using a descending order.<br />\nMust be one of: \"dateInserted\", \"-dateInserted\", \"dateLastComment\", \"-dateLastComment\", \"countMembers\", \"-countMembers\", \"countDiscussions\", \"-countDiscussions\".</p>\n"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "<p>Expand associated records.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Create a group.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            }
        },
        "/groups/{id}": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Groups"
                ],
                "summary": "Update a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Delete a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/groups/{id}/applicants": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "List applicants to a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group ID.</p>\n"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "<p>Expand associated records.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GroupApplicant"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Apply to a private group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "reason": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 200,
                                    "description": "The reason why the user wants to apply to this group."
                                }
                            },
                            "required": [
                                "reason"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupApplicant"
                        }
                    }
                }
            }
        },
        "/groups/{id}/applicants/{userID}": {
            "patch": {
                "tags": [
                    "Groups"
                ],
                "summary": "Approve or deny a group applicant.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group member user ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "minLength": 1,
                                    "enum": [
                                        "approved",
                                        "denied"
                                    ],
                                    "description": "The status of the applicant."
                                }
                            },
                            "required": [
                                "status"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupApplicant"
                        }
                    }
                }
            }
        },
        "/groups/{id}/apply": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Apply to a private group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "reason": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 200,
                                    "description": "The reason why the user wants to apply to this group."
                                }
                            },
                            "required": [
                                "reason"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupApplicant"
                        }
                    }
                }
            }
        },
        "/groups/{id}/edit": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Get a group for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                }
            }
        },
        "/groups/{id}/invites": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "List the invites for a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group ID.</p>\n"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "<p>Expand associated records.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GroupInvite"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Invite a user to a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "userID"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupInvite"
                        }
                    }
                }
            }
        },
        "/groups/{id}/invites/{userID}": {
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Delete an invite to a user from a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group ID.</p>\n"
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group member user ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/groups/{id}/join": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Join a public group or a group that you have been invited to.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupMember"
                        }
                    }
                }
            }
        },
        "/groups/{id}/leave": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Leave a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/groups/{id}/members": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "List members of a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group ID.</p>\n"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "type": "boolean",
                        "description": "<p>Expand associated records.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GroupMember"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Add a user to a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": {
                                    "type": "integer",
                                    "description": "The ID of the user."
                                },
                                "role": {
                                    "type": "string",
                                    "default": "member",
                                    "enum": [
                                        "leader",
                                        "member"
                                    ],
                                    "description": "The role of the user for that group."
                                }
                            },
                            "required": [
                                "userID"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupMember"
                        }
                    }
                }
            }
        },
        "/groups/{id}/members/{userID}": {
            "patch": {
                "tags": [
                    "Groups"
                ],
                "summary": "Change a user's role within a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group ID."
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The group member user ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "role": {
                                    "type": "string",
                                    "minLength": 1,
                                    "enum": [
                                        "leader",
                                        "member"
                                    ],
                                    "description": "The role of the user for that group."
                                }
                            },
                            "required": [
                                "role"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupMember"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Remove a user from a group or leave a group.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The group ID.</p>\n"
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "default": null,
                        "type": "integer",
                        "description": "<p>The group member user ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/locales/translations/{locale}": {
            "get": {
                "tags": [
                    "Locales"
                ],
                "parameters": [
                    {
                        "name": "locale",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "js",
                        "in": "query",
                        "type": "boolean",
                        "description": "<p>Whether or not to serve as javascript.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/media": {
            "post": {
                "tags": [
                    "Media"
                ],
                "summary": "Add a media item.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "file": {
                                    "$ref": "#/definitions/UploadedFile"
                                },
                                "type": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The upload type.",
                                    "enum": [
                                        "image"
                                    ]
                                }
                            },
                            "required": [
                                "file",
                                "type"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "mediaID": {
                                    "type": "integer",
                                    "description": "The ID of the record."
                                },
                                "url": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL of the file."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The original filename of the upload."
                                },
                                "type": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "MIME type"
                                },
                                "size": {
                                    "type": "integer",
                                    "description": "File size in bytes"
                                },
                                "width": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Image width"
                                },
                                "height": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Image height"
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the media item was created.",
                                    "format": "date-time"
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The user that created the media item."
                                },
                                "foreignType": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Table the media is linked to."
                                },
                                "foreignID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The ID of the table."
                                }
                            },
                            "required": [
                                "mediaID",
                                "url",
                                "name",
                                "type",
                                "size",
                                "width",
                                "height",
                                "dateInserted",
                                "insertUserID",
                                "foreignType",
                                "foreignID"
                            ]
                        }
                    }
                }
            }
        },
        "/media/by-url": {
            "get": {
                "tags": [
                    "Media"
                ],
                "summary": "Get a media item, using its URL.",
                "parameters": [
                    {
                        "name": "url",
                        "in": "query",
                        "type": "string",
                        "minLength": 1,
                        "description": "<p>Full URL to the item.</p>\n",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "mediaID": {
                                    "type": "integer",
                                    "description": "The ID of the record."
                                },
                                "url": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL of the file."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The original filename of the upload."
                                },
                                "type": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "MIME type"
                                },
                                "size": {
                                    "type": "integer",
                                    "description": "File size in bytes"
                                },
                                "width": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Image width"
                                },
                                "height": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Image height"
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the media item was created.",
                                    "format": "date-time"
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The user that created the media item."
                                },
                                "foreignType": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Table the media is linked to."
                                },
                                "foreignID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The ID of the table."
                                }
                            },
                            "required": [
                                "mediaID",
                                "url",
                                "name",
                                "type",
                                "size",
                                "width",
                                "height",
                                "dateInserted",
                                "insertUserID",
                                "foreignType",
                                "foreignID"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Media"
                ],
                "summary": "Delete a media item, using its URL.",
                "parameters": [
                    {
                        "name": "url",
                        "in": "query",
                        "type": "string",
                        "minLength": 1,
                        "description": "<p>Full URL to the item.</p>\n",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/media/{id}": {
            "get": {
                "tags": [
                    "Media"
                ],
                "summary": "Get a media item.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The media ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "mediaID": {
                                    "type": "integer",
                                    "description": "The ID of the record."
                                },
                                "url": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL of the file."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The original filename of the upload."
                                },
                                "type": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "MIME type"
                                },
                                "size": {
                                    "type": "integer",
                                    "description": "File size in bytes"
                                },
                                "width": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Image width"
                                },
                                "height": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Image height"
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the media item was created.",
                                    "format": "date-time"
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The user that created the media item."
                                },
                                "foreignType": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Table the media is linked to."
                                },
                                "foreignID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The ID of the table."
                                }
                            },
                            "required": [
                                "mediaID",
                                "url",
                                "name",
                                "type",
                                "size",
                                "width",
                                "height",
                                "dateInserted",
                                "insertUserID",
                                "foreignType",
                                "foreignID"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Media"
                ],
                "summary": "Delete a media item.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The media ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "mediaID": {
                                    "type": "integer",
                                    "description": "The ID of the record."
                                },
                                "url": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The URL of the file."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The original filename of the upload."
                                },
                                "type": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "MIME type"
                                },
                                "size": {
                                    "type": "integer",
                                    "description": "File size in bytes"
                                },
                                "width": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Image width"
                                },
                                "height": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "Image height"
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the media item was created.",
                                    "format": "date-time"
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The user that created the media item."
                                },
                                "foreignType": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Table the media is linked to."
                                },
                                "foreignID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The ID of the table."
                                }
                            },
                            "required": [
                                "mediaID",
                                "url",
                                "name",
                                "type",
                                "size",
                                "width",
                                "height",
                                "dateInserted",
                                "insertUserID",
                                "foreignType",
                                "foreignID"
                            ]
                        }
                    }
                }
            }
        },
        "/messages": {
            "get": {
                "tags": [
                    "Messages"
                ],
                "summary": "List user messages.",
                "parameters": [
                    {
                        "name": "conversationID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by conversation.</p>\n"
                    },
                    {
                        "name": "insertUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by author.</p>\n"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": "50",
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Message"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Messages"
                ],
                "summary": "Add a message.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MessagePost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    }
                }
            }
        },
        "/messages/{id}": {
            "get": {
                "tags": [
                    "Messages"
                ],
                "summary": "Get a message.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The message ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    }
                }
            }
        },
        "/polls": {
            "get": {
                "tags": [
                    "Polls"
                ],
                "summary": "List polls.",
                "parameters": [
                    {
                        "name": "discussionID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by discussion.</p>\n",
                        "x-filter": {
                            "field": "DiscussionID"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "insertUserID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by author.</p>\n",
                        "x-filter": {
                            "field": "InsertUserID"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser",
                                "updateUser"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "pollID": {
                                        "type": "integer",
                                        "description": "The unique ID of the poll."
                                    },
                                    "name": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The name of the poll."
                                    },
                                    "discussionID": {
                                        "type": "integer",
                                        "description": "The discussion the poll is displayed in."
                                    },
                                    "countOptions": {
                                        "type": "integer",
                                        "description": "The number of options to choose from."
                                    },
                                    "countVotes": {
                                        "type": "integer",
                                        "description": "The number of votes."
                                    },
                                    "insertUserID": {
                                        "type": "integer",
                                        "description": "The unique ID of the user who created this poll."
                                    },
                                    "insertUser": {
                                        "$ref": "#/definitions/UserFragment"
                                    },
                                    "dateInserted": {
                                        "type": "string",
                                        "description": "When the poll was created.",
                                        "format": "date-time"
                                    },
                                    "updateUserID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "The unique ID of the user who updated this poll."
                                    },
                                    "updateUser": {
                                        "$ref": "#/definitions/UserFragment"
                                    },
                                    "dateUpdated": {
                                        "type": [
                                            "datetime",
                                            "null"
                                        ],
                                        "description": "When the poll was updated."
                                    }
                                },
                                "required": [
                                    "pollID",
                                    "name",
                                    "discussionID",
                                    "countOptions",
                                    "countVotes",
                                    "insertUserID",
                                    "dateInserted",
                                    "updateUserID",
                                    "dateUpdated"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Polls"
                ],
                "summary": "Create a poll.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PollPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "pollID": {
                                    "type": "integer",
                                    "description": "The unique ID of the poll."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the poll."
                                },
                                "discussionID": {
                                    "type": "integer",
                                    "description": "The discussion the poll is displayed in."
                                },
                                "countOptions": {
                                    "type": "integer",
                                    "description": "The number of options to choose from."
                                },
                                "countVotes": {
                                    "type": "integer",
                                    "description": "The number of votes."
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The unique ID of the user who created this poll."
                                },
                                "insertUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the poll was created.",
                                    "format": "date-time"
                                },
                                "updateUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the user who updated this poll."
                                },
                                "updateUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "dateUpdated": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the poll was updated."
                                }
                            },
                            "required": [
                                "pollID",
                                "name",
                                "discussionID",
                                "countOptions",
                                "countVotes",
                                "insertUserID",
                                "dateInserted",
                                "updateUserID",
                                "dateUpdated"
                            ]
                        }
                    }
                }
            }
        },
        "/polls/{id}": {
            "get": {
                "tags": [
                    "Polls"
                ],
                "summary": "Get a poll.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The poll ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "pollID": {
                                    "type": "integer",
                                    "description": "The unique ID of the poll."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the poll."
                                },
                                "discussionID": {
                                    "type": "integer",
                                    "description": "The discussion the poll is displayed in."
                                },
                                "countOptions": {
                                    "type": "integer",
                                    "description": "The number of options to choose from."
                                },
                                "countVotes": {
                                    "type": "integer",
                                    "description": "The number of votes."
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The unique ID of the user who created this poll."
                                },
                                "insertUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the poll was created.",
                                    "format": "date-time"
                                },
                                "updateUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the user who updated this poll."
                                },
                                "updateUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "dateUpdated": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the poll was updated."
                                }
                            },
                            "required": [
                                "pollID",
                                "name",
                                "discussionID",
                                "countOptions",
                                "countVotes",
                                "insertUserID",
                                "dateInserted",
                                "updateUserID",
                                "dateUpdated"
                            ]
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Polls"
                ],
                "summary": "Update a poll.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The poll ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PollPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "pollID": {
                                    "type": "integer",
                                    "description": "The unique ID of the poll."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the poll."
                                },
                                "discussionID": {
                                    "type": "integer",
                                    "description": "The discussion the poll is displayed in."
                                },
                                "countOptions": {
                                    "type": "integer",
                                    "description": "The number of options to choose from."
                                },
                                "countVotes": {
                                    "type": "integer",
                                    "description": "The number of votes."
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The unique ID of the user who created this poll."
                                },
                                "insertUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the poll was created.",
                                    "format": "date-time"
                                },
                                "updateUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the user who updated this poll."
                                },
                                "updateUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "dateUpdated": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the poll was updated."
                                }
                            },
                            "required": [
                                "pollID",
                                "name",
                                "discussionID",
                                "countOptions",
                                "countVotes",
                                "insertUserID",
                                "dateInserted",
                                "updateUserID",
                                "dateUpdated"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Polls"
                ],
                "summary": "Delete a poll.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The poll ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/polls/{id}/edit": {
            "get": {
                "tags": [
                    "Polls"
                ],
                "summary": "Get a poll for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The poll ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PollGetEdit"
                        }
                    }
                }
            }
        },
        "/polls/{id}/options": {
            "get": {
                "tags": [
                    "Polls"
                ],
                "summary": "List polls' options.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "pollOptionID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by pollOptionID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "insertUser",
                                "updateUser"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "pollOptionID": {
                                        "type": "integer",
                                        "description": "The unique ID of the option."
                                    },
                                    "pollID": {
                                        "type": "integer",
                                        "description": "The unique ID of the poll."
                                    },
                                    "body": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "The name of the option."
                                    },
                                    "countVotes": {
                                        "type": "integer",
                                        "description": "The number of votes."
                                    },
                                    "insertUserID": {
                                        "type": "integer",
                                        "description": "The unique ID of the user who created this poll."
                                    },
                                    "insertUser": {
                                        "$ref": "#/definitions/UserFragment"
                                    },
                                    "dateInserted": {
                                        "type": "string",
                                        "description": "When the poll was created.",
                                        "format": "date-time"
                                    },
                                    "updateUserID": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "The unique ID of the user who updated this poll."
                                    },
                                    "updateUser": {
                                        "$ref": "#/definitions/UserFragment"
                                    },
                                    "dateUpdated": {
                                        "type": [
                                            "datetime",
                                            "null"
                                        ],
                                        "description": "When the poll was updated."
                                    }
                                },
                                "required": [
                                    "pollOptionID",
                                    "pollID",
                                    "body",
                                    "countVotes",
                                    "insertUserID",
                                    "dateInserted",
                                    "updateUserID",
                                    "dateUpdated"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Polls"
                ],
                "summary": "Create a poll option.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PollOptionPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "pollOptionID": {
                                    "type": "integer",
                                    "description": "The unique ID of the option."
                                },
                                "pollID": {
                                    "type": "integer",
                                    "description": "The unique ID of the poll."
                                },
                                "body": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the option."
                                },
                                "countVotes": {
                                    "type": "integer",
                                    "description": "The number of votes."
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The unique ID of the user who created this poll."
                                },
                                "insertUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the poll was created.",
                                    "format": "date-time"
                                },
                                "updateUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the user who updated this poll."
                                },
                                "updateUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "dateUpdated": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the poll was updated."
                                }
                            },
                            "required": [
                                "pollOptionID",
                                "pollID",
                                "body",
                                "countVotes",
                                "insertUserID",
                                "dateInserted",
                                "updateUserID",
                                "dateUpdated"
                            ]
                        }
                    }
                }
            }
        },
        "/polls/{id}/options/{pollOptionID}": {
            "patch": {
                "tags": [
                    "Polls"
                ],
                "summary": "Update a poll option.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "pollOptionID",
                        "in": "path",
                        "required": true,
                        "description": "The poll option ID",
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PollOptionPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "pollOptionID": {
                                    "type": "integer",
                                    "description": "The unique ID of the option."
                                },
                                "pollID": {
                                    "type": "integer",
                                    "description": "The unique ID of the poll."
                                },
                                "body": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The name of the option."
                                },
                                "countVotes": {
                                    "type": "integer",
                                    "description": "The number of votes."
                                },
                                "insertUserID": {
                                    "type": "integer",
                                    "description": "The unique ID of the user who created this poll."
                                },
                                "insertUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the poll was created.",
                                    "format": "date-time"
                                },
                                "updateUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The unique ID of the user who updated this poll."
                                },
                                "updateUser": {
                                    "$ref": "#/definitions/UserFragment"
                                },
                                "dateUpdated": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the poll was updated."
                                }
                            },
                            "required": [
                                "pollOptionID",
                                "pollID",
                                "body",
                                "countVotes",
                                "insertUserID",
                                "dateInserted",
                                "updateUserID",
                                "dateUpdated"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Polls"
                ],
                "summary": "Delete a poll.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The poll ID.</p>\n"
                    },
                    {
                        "name": "pollOptionID",
                        "in": "path",
                        "required": true,
                        "description": "<p>The poll option ID</p>\n",
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/polls/{id}/votes": {
            "get": {
                "tags": [
                    "Polls"
                ],
                "summary": "List polls' votes.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 25,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "pollOptionID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Filter by pollOptionID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "user"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "userID": {
                                        "description": "The user that made the vote"
                                    },
                                    "pollOptionID": {
                                        "type": "integer",
                                        "description": "The unique ID of the option."
                                    },
                                    "dateInserted": {
                                        "type": "string",
                                        "description": "When the poll was created.",
                                        "format": "date-time"
                                    }
                                },
                                "required": [
                                    "userID",
                                    "pollOptionID",
                                    "dateInserted"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Polls"
                ],
                "summary": "Vote for a poll option.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PollVotePost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": {
                                    "description": "The user that made the vote"
                                },
                                "pollOptionID": {
                                    "type": "integer",
                                    "description": "The unique ID of the option."
                                },
                                "dateInserted": {
                                    "type": "string",
                                    "description": "When the poll was created.",
                                    "format": "date-time"
                                }
                            },
                            "required": [
                                "userID",
                                "pollOptionID",
                                "dateInserted"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Polls"
                ],
                "summary": "Delete a poll vote.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The poll ID.</p>\n"
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>The user that voted. Defaults to the current user.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/ranks": {
            "get": {
                "tags": [
                    "Ranks"
                ],
                "summary": "Get a list of all ranks.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "rankID": {
                                        "description": "Rank ID."
                                    },
                                    "name": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "Name of the rank."
                                    },
                                    "userTitle": {
                                        "type": "string",
                                        "minLength": 1,
                                        "description": "Label that will display beside the user."
                                    },
                                    "level": {
                                        "type": "integer",
                                        "description": "Level of the rank. Determines the sort order."
                                    },
                                    "notificationBody": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "minLength": 0,
                                        "description": "Message for the users when they earn this rank."
                                    },
                                    "cssClass": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "minLength": 1,
                                        "description": "Custom CSS class for users of this rank."
                                    },
                                    "criteria": {
                                        "type": "object",
                                        "properties": {
                                            "points": {
                                                "type": "integer",
                                                "description": "User points."
                                            },
                                            "time": {
                                                "type": "string",
                                                "description": "Age of user account (e.g. 1 day, 3 weeks, 1 month)."
                                            },
                                            "posts": {
                                                "type": "integer",
                                                "description": "Total posts created by the user."
                                            },
                                            "roleID": {
                                                "type": "integer",
                                                "description": "ID of a role required for this rank."
                                            },
                                            "permission": {
                                                "type": "string",
                                                "description": "Permission slug.",
                                                "enum": [
                                                    "site.manage",
                                                    "community.moderate"
                                                ]
                                            },
                                            "manual": {
                                                "type": "boolean",
                                                "description": "Allow manually granting this rank."
                                            }
                                        }
                                    },
                                    "abilities": {
                                        "type": "object",
                                        "properties": {
                                            "discussionsAdd": {
                                                "type": "boolean",
                                                "enum": [
                                                    false
                                                ],
                                                "description": "Allow starting discussions."
                                            },
                                            "commentsAdd": {
                                                "type": "boolean",
                                                "enum": [
                                                    false
                                                ],
                                                "description": "Allow adding comments."
                                            },
                                            "conversationsAdd": {
                                                "type": "boolean",
                                                "description": "Allow starting conversations."
                                            },
                                            "verified": {
                                                "type": "boolean",
                                                "description": "Verified status. true is verified. false requires verification."
                                            },
                                            "format": {
                                                "type": "string",
                                                "description": "Formatting restrictions.",
                                                "enum": [
                                                    "Text",
                                                    "TextEx"
                                                ]
                                            },
                                            "linksActivity": {
                                                "type": "boolean",
                                                "enum": [
                                                    false
                                                ],
                                                "description": "Allow links in activity feed."
                                            },
                                            "linksConversations": {
                                                "type": "boolean",
                                                "enum": [
                                                    false
                                                ],
                                                "description": "Allow links in conversations."
                                            },
                                            "linksPosts": {
                                                "type": "boolean",
                                                "enum": [
                                                    false
                                                ],
                                                "description": "Allow links in posts."
                                            },
                                            "title": {
                                                "type": "boolean",
                                                "description": "Allow user to have a title."
                                            },
                                            "location": {
                                                "type": "boolean",
                                                "description": "Allow user to have a location."
                                            },
                                            "avatar": {
                                                "type": "boolean",
                                                "description": "Allow user to have a custom avatar."
                                            },
                                            "signature": {
                                                "type": "boolean",
                                                "description": "Allow user to have a signature."
                                            },
                                            "signatureImages": {
                                                "type": "integer",
                                                "description": "Maximum number of images in a signature. -1 for no limit."
                                            },
                                            "signatureLength": {
                                                "type": "integer",
                                                "description": "Maximum length of a signature."
                                            },
                                            "polls": {
                                                "type": "boolean",
                                                "description": "Allow creation of polls."
                                            },
                                            "meActions": {
                                                "type": "boolean",
                                                "description": "Allow usage of \"me actions\"."
                                            },
                                            "curation": {
                                                "type": "boolean",
                                                "description": "Allow content curation."
                                            },
                                            "editTimeout": {
                                                "type": "integer",
                                                "description": "Length of time, in seconds, a user can edit their post. -1 for no limit."
                                            },
                                            "roleID": {
                                                "type": "integer",
                                                "description": "Permissions of this role are applied to users with the rank."
                                            }
                                        }
                                    }
                                },
                                "required": [
                                    "rankID",
                                    "name",
                                    "userTitle",
                                    "level",
                                    "notificationBody",
                                    "cssClass"
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Ranks"
                ],
                "summary": "Add a new rank.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RankPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "rankID": {
                                    "description": "Rank ID."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Name of the rank."
                                },
                                "userTitle": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Label that will display beside the user."
                                },
                                "level": {
                                    "type": "integer",
                                    "description": "Level of the rank. Determines the sort order."
                                },
                                "notificationBody": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "Message for the users when they earn this rank."
                                },
                                "cssClass": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Custom CSS class for users of this rank."
                                },
                                "criteria": {
                                    "type": "object",
                                    "properties": {
                                        "points": {
                                            "type": "integer",
                                            "description": "User points."
                                        },
                                        "time": {
                                            "type": "string",
                                            "description": "Age of user account (e.g. 1 day, 3 weeks, 1 month)."
                                        },
                                        "posts": {
                                            "type": "integer",
                                            "description": "Total posts created by the user."
                                        },
                                        "roleID": {
                                            "type": "integer",
                                            "description": "ID of a role required for this rank."
                                        },
                                        "permission": {
                                            "type": "string",
                                            "description": "Permission slug.",
                                            "enum": [
                                                "site.manage",
                                                "community.moderate"
                                            ]
                                        },
                                        "manual": {
                                            "type": "boolean",
                                            "description": "Allow manually granting this rank."
                                        }
                                    }
                                },
                                "abilities": {
                                    "type": "object",
                                    "properties": {
                                        "discussionsAdd": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow starting discussions."
                                        },
                                        "commentsAdd": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow adding comments."
                                        },
                                        "conversationsAdd": {
                                            "type": "boolean",
                                            "description": "Allow starting conversations."
                                        },
                                        "verified": {
                                            "type": "boolean",
                                            "description": "Verified status. true is verified. false requires verification."
                                        },
                                        "format": {
                                            "type": "string",
                                            "description": "Formatting restrictions.",
                                            "enum": [
                                                "Text",
                                                "TextEx"
                                            ]
                                        },
                                        "linksActivity": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in activity feed."
                                        },
                                        "linksConversations": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in conversations."
                                        },
                                        "linksPosts": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in posts."
                                        },
                                        "title": {
                                            "type": "boolean",
                                            "description": "Allow user to have a title."
                                        },
                                        "location": {
                                            "type": "boolean",
                                            "description": "Allow user to have a location."
                                        },
                                        "avatar": {
                                            "type": "boolean",
                                            "description": "Allow user to have a custom avatar."
                                        },
                                        "signature": {
                                            "type": "boolean",
                                            "description": "Allow user to have a signature."
                                        },
                                        "signatureImages": {
                                            "type": "integer",
                                            "description": "Maximum number of images in a signature. -1 for no limit."
                                        },
                                        "signatureLength": {
                                            "type": "integer",
                                            "description": "Maximum length of a signature."
                                        },
                                        "polls": {
                                            "type": "boolean",
                                            "description": "Allow creation of polls."
                                        },
                                        "meActions": {
                                            "type": "boolean",
                                            "description": "Allow usage of \"me actions\"."
                                        },
                                        "curation": {
                                            "type": "boolean",
                                            "description": "Allow content curation."
                                        },
                                        "editTimeout": {
                                            "type": "integer",
                                            "description": "Length of time, in seconds, a user can edit their post. -1 for no limit."
                                        },
                                        "roleID": {
                                            "type": "integer",
                                            "description": "Permissions of this role are applied to users with the rank."
                                        }
                                    }
                                }
                            },
                            "required": [
                                "rankID",
                                "name",
                                "userTitle",
                                "level",
                                "notificationBody",
                                "cssClass"
                            ]
                        }
                    }
                }
            }
        },
        "/ranks/{id}": {
            "get": {
                "tags": [
                    "Ranks"
                ],
                "summary": "Get a single rank.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The rank ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "rankID": {
                                    "description": "Rank ID."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Name of the rank."
                                },
                                "userTitle": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Label that will display beside the user."
                                },
                                "level": {
                                    "type": "integer",
                                    "description": "Level of the rank. Determines the sort order."
                                },
                                "notificationBody": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "Message for the users when they earn this rank."
                                },
                                "cssClass": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Custom CSS class for users of this rank."
                                },
                                "criteria": {
                                    "type": "object",
                                    "properties": {
                                        "points": {
                                            "type": "integer",
                                            "description": "User points."
                                        },
                                        "time": {
                                            "type": "string",
                                            "description": "Age of user account (e.g. 1 day, 3 weeks, 1 month)."
                                        },
                                        "posts": {
                                            "type": "integer",
                                            "description": "Total posts created by the user."
                                        },
                                        "roleID": {
                                            "type": "integer",
                                            "description": "ID of a role required for this rank."
                                        },
                                        "permission": {
                                            "type": "string",
                                            "description": "Permission slug.",
                                            "enum": [
                                                "site.manage",
                                                "community.moderate"
                                            ]
                                        },
                                        "manual": {
                                            "type": "boolean",
                                            "description": "Allow manually granting this rank."
                                        }
                                    }
                                },
                                "abilities": {
                                    "type": "object",
                                    "properties": {
                                        "discussionsAdd": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow starting discussions."
                                        },
                                        "commentsAdd": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow adding comments."
                                        },
                                        "conversationsAdd": {
                                            "type": "boolean",
                                            "description": "Allow starting conversations."
                                        },
                                        "verified": {
                                            "type": "boolean",
                                            "description": "Verified status. true is verified. false requires verification."
                                        },
                                        "format": {
                                            "type": "string",
                                            "description": "Formatting restrictions.",
                                            "enum": [
                                                "Text",
                                                "TextEx"
                                            ]
                                        },
                                        "linksActivity": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in activity feed."
                                        },
                                        "linksConversations": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in conversations."
                                        },
                                        "linksPosts": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in posts."
                                        },
                                        "title": {
                                            "type": "boolean",
                                            "description": "Allow user to have a title."
                                        },
                                        "location": {
                                            "type": "boolean",
                                            "description": "Allow user to have a location."
                                        },
                                        "avatar": {
                                            "type": "boolean",
                                            "description": "Allow user to have a custom avatar."
                                        },
                                        "signature": {
                                            "type": "boolean",
                                            "description": "Allow user to have a signature."
                                        },
                                        "signatureImages": {
                                            "type": "integer",
                                            "description": "Maximum number of images in a signature. -1 for no limit."
                                        },
                                        "signatureLength": {
                                            "type": "integer",
                                            "description": "Maximum length of a signature."
                                        },
                                        "polls": {
                                            "type": "boolean",
                                            "description": "Allow creation of polls."
                                        },
                                        "meActions": {
                                            "type": "boolean",
                                            "description": "Allow usage of \"me actions\"."
                                        },
                                        "curation": {
                                            "type": "boolean",
                                            "description": "Allow content curation."
                                        },
                                        "editTimeout": {
                                            "type": "integer",
                                            "description": "Length of time, in seconds, a user can edit their post. -1 for no limit."
                                        },
                                        "roleID": {
                                            "type": "integer",
                                            "description": "Permissions of this role are applied to users with the rank."
                                        }
                                    }
                                }
                            },
                            "required": [
                                "rankID",
                                "name",
                                "userTitle",
                                "level",
                                "notificationBody",
                                "cssClass"
                            ]
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Ranks"
                ],
                "summary": "Edit a rank.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RankPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "rankID": {
                                    "description": "Rank ID."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Name of the rank."
                                },
                                "userTitle": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Label that will display beside the user."
                                },
                                "level": {
                                    "type": "integer",
                                    "description": "Level of the rank. Determines the sort order."
                                },
                                "notificationBody": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "Message for the users when they earn this rank."
                                },
                                "cssClass": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Custom CSS class for users of this rank."
                                },
                                "criteria": {
                                    "type": "object",
                                    "properties": {
                                        "points": {
                                            "type": "integer",
                                            "description": "User points."
                                        },
                                        "time": {
                                            "type": "string",
                                            "description": "Age of user account (e.g. 1 day, 3 weeks, 1 month)."
                                        },
                                        "posts": {
                                            "type": "integer",
                                            "description": "Total posts created by the user."
                                        },
                                        "roleID": {
                                            "type": "integer",
                                            "description": "ID of a role required for this rank."
                                        },
                                        "permission": {
                                            "type": "string",
                                            "description": "Permission slug.",
                                            "enum": [
                                                "site.manage",
                                                "community.moderate"
                                            ]
                                        },
                                        "manual": {
                                            "type": "boolean",
                                            "description": "Allow manually granting this rank."
                                        }
                                    }
                                },
                                "abilities": {
                                    "type": "object",
                                    "properties": {
                                        "discussionsAdd": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow starting discussions."
                                        },
                                        "commentsAdd": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow adding comments."
                                        },
                                        "conversationsAdd": {
                                            "type": "boolean",
                                            "description": "Allow starting conversations."
                                        },
                                        "verified": {
                                            "type": "boolean",
                                            "description": "Verified status. true is verified. false requires verification."
                                        },
                                        "format": {
                                            "type": "string",
                                            "description": "Formatting restrictions.",
                                            "enum": [
                                                "Text",
                                                "TextEx"
                                            ]
                                        },
                                        "linksActivity": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in activity feed."
                                        },
                                        "linksConversations": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in conversations."
                                        },
                                        "linksPosts": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in posts."
                                        },
                                        "title": {
                                            "type": "boolean",
                                            "description": "Allow user to have a title."
                                        },
                                        "location": {
                                            "type": "boolean",
                                            "description": "Allow user to have a location."
                                        },
                                        "avatar": {
                                            "type": "boolean",
                                            "description": "Allow user to have a custom avatar."
                                        },
                                        "signature": {
                                            "type": "boolean",
                                            "description": "Allow user to have a signature."
                                        },
                                        "signatureImages": {
                                            "type": "integer",
                                            "description": "Maximum number of images in a signature. -1 for no limit."
                                        },
                                        "signatureLength": {
                                            "type": "integer",
                                            "description": "Maximum length of a signature."
                                        },
                                        "polls": {
                                            "type": "boolean",
                                            "description": "Allow creation of polls."
                                        },
                                        "meActions": {
                                            "type": "boolean",
                                            "description": "Allow usage of \"me actions\"."
                                        },
                                        "curation": {
                                            "type": "boolean",
                                            "description": "Allow content curation."
                                        },
                                        "editTimeout": {
                                            "type": "integer",
                                            "description": "Length of time, in seconds, a user can edit their post. -1 for no limit."
                                        },
                                        "roleID": {
                                            "type": "integer",
                                            "description": "Permissions of this role are applied to users with the rank."
                                        }
                                    }
                                }
                            },
                            "required": [
                                "rankID",
                                "name",
                                "userTitle",
                                "level",
                                "notificationBody",
                                "cssClass"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Ranks"
                ],
                "summary": "Delete a rank.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The rank ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/ranks/{id}/edit": {
            "get": {
                "tags": [
                    "Ranks"
                ],
                "summary": "Get a rank for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The rank ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "rankID": {
                                    "description": "Rank ID."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Name of the rank."
                                },
                                "userTitle": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Label that will display beside the user."
                                },
                                "level": {
                                    "type": "integer",
                                    "description": "Level of the rank. Determines the sort order."
                                },
                                "notificationBody": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "Message for the users when they earn this rank."
                                },
                                "cssClass": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Custom CSS class for users of this rank."
                                },
                                "criteria": {
                                    "type": "object",
                                    "properties": {
                                        "points": {
                                            "type": "integer",
                                            "description": "User points."
                                        },
                                        "time": {
                                            "type": "string",
                                            "description": "Age of user account (e.g. 1 day, 3 weeks, 1 month)."
                                        },
                                        "posts": {
                                            "type": "integer",
                                            "description": "Total posts created by the user."
                                        },
                                        "roleID": {
                                            "type": "integer",
                                            "description": "ID of a role required for this rank."
                                        },
                                        "permission": {
                                            "type": "string",
                                            "description": "Permission slug.",
                                            "enum": [
                                                "site.manage",
                                                "community.moderate"
                                            ]
                                        },
                                        "manual": {
                                            "type": "boolean",
                                            "description": "Allow manually granting this rank."
                                        }
                                    }
                                },
                                "abilities": {
                                    "type": "object",
                                    "properties": {
                                        "discussionsAdd": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow starting discussions."
                                        },
                                        "commentsAdd": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow adding comments."
                                        },
                                        "conversationsAdd": {
                                            "type": "boolean",
                                            "description": "Allow starting conversations."
                                        },
                                        "verified": {
                                            "type": "boolean",
                                            "description": "Verified status. true is verified. false requires verification."
                                        },
                                        "format": {
                                            "type": "string",
                                            "description": "Formatting restrictions.",
                                            "enum": [
                                                "Text",
                                                "TextEx"
                                            ]
                                        },
                                        "linksActivity": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in activity feed."
                                        },
                                        "linksConversations": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in conversations."
                                        },
                                        "linksPosts": {
                                            "type": "boolean",
                                            "enum": [
                                                false
                                            ],
                                            "description": "Allow links in posts."
                                        },
                                        "title": {
                                            "type": "boolean",
                                            "description": "Allow user to have a title."
                                        },
                                        "location": {
                                            "type": "boolean",
                                            "description": "Allow user to have a location."
                                        },
                                        "avatar": {
                                            "type": "boolean",
                                            "description": "Allow user to have a custom avatar."
                                        },
                                        "signature": {
                                            "type": "boolean",
                                            "description": "Allow user to have a signature."
                                        },
                                        "signatureImages": {
                                            "type": "integer",
                                            "description": "Maximum number of images in a signature. -1 for no limit."
                                        },
                                        "signatureLength": {
                                            "type": "integer",
                                            "description": "Maximum length of a signature."
                                        },
                                        "polls": {
                                            "type": "boolean",
                                            "description": "Allow creation of polls."
                                        },
                                        "meActions": {
                                            "type": "boolean",
                                            "description": "Allow usage of \"me actions\"."
                                        },
                                        "curation": {
                                            "type": "boolean",
                                            "description": "Allow content curation."
                                        },
                                        "editTimeout": {
                                            "type": "integer",
                                            "description": "Length of time, in seconds, a user can edit their post. -1 for no limit."
                                        },
                                        "roleID": {
                                            "type": "integer",
                                            "description": "Permissions of this role are applied to users with the rank."
                                        }
                                    }
                                }
                            },
                            "required": [
                                "rankID",
                                "name",
                                "userTitle",
                                "level",
                                "notificationBody",
                                "cssClass"
                            ]
                        }
                    }
                }
            }
        },
        "/reactions": {
            "get": {
                "tags": [
                    "Reactions"
                ],
                "summary": "Get a list of reaction types.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ReactionType"
                            }
                        }
                    }
                }
            }
        },
        "/reactions/edit/{urlCode}": {
            "get": {
                "tags": [
                    "Reactions"
                ],
                "summary": "Get a reaction type for editing.",
                "parameters": [
                    {
                        "name": "urlCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>The reaction type ID.</p>\n",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ReactionType"
                        }
                    }
                }
            }
        },
        "/reactions/{urlCode}": {
            "get": {
                "tags": [
                    "Reactions"
                ],
                "summary": "Get a single reaction type.",
                "parameters": [
                    {
                        "name": "urlCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>The reaction type ID.</p>\n",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ReactionType"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Reactions"
                ],
                "summary": "Update a reaction type.",
                "parameters": [
                    {
                        "name": "urlCode",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReactionType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ReactionType"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "List roles.",
                "parameters": [
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "permissions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Role"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Add a role.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RolePost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The role ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "permissions"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update a role.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The role ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RolePost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The role ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/roles/{id}/edit": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The role ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "roleID": {
                                    "type": "integer",
                                    "description": "ID of the role."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Name of the role."
                                },
                                "description": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "Description of the role."
                                },
                                "type": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "Default type of this role."
                                },
                                "deletable": {
                                    "type": "boolean",
                                    "description": "Is the role deletable?"
                                },
                                "canSession": {
                                    "type": "boolean",
                                    "description": "Can users in this role start a session?"
                                },
                                "personalInfo": {
                                    "type": "boolean",
                                    "description": "Is membership in this role personal information?"
                                }
                            },
                            "required": [
                                "roleID",
                                "name",
                                "description",
                                "type",
                                "deletable",
                                "canSession",
                                "personalInfo"
                            ]
                        }
                    }
                }
            }
        },
        "/roles/{id}/permissions": {
            "patch": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update permissions on a role",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Roles"
                ],
                "summary": "Overwrite all permissions for a role.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "tags": [
                    "Search"
                ],
                "summary": "Search for records matching specific criteria.",
                "parameters": [
                    {
                        "name": "recordTypes",
                        "in": "query",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "discussion",
                                "comment",
                                "group"
                            ]
                        },
                        "style": "form",
                        "description": "<p>Restrict the search to the specified main type(s) of records.</p>\n"
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "discussion",
                                "comment",
                                "question",
                                "group"
                            ]
                        },
                        "style": "form",
                        "description": "<p>Restrict the search to the specified type(s) of records.</p>\n"
                    },
                    {
                        "name": "discussionID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Set the scope of the search to the comments of a discussion. Incompatible with recordType and type.</p>\n",
                        "x-search-scope": true
                    },
                    {
                        "name": "categoryID",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Set the scope of the search to a specific category.</p>\n",
                        "x-search-scope": true
                    },
                    {
                        "name": "followedCategories",
                        "in": "query",
                        "type": "boolean",
                        "default": false,
                        "description": "<p>Set the scope of the search to followed categories only.</p>\n",
                        "x-search-scope": true
                    },
                    {
                        "name": "includeChildCategories",
                        "in": "query",
                        "type": "boolean",
                        "default": false,
                        "description": "<p>Search the specified category's subtree. Works with categoryID</p>\n"
                    },
                    {
                        "name": "includeArchivedCategories",
                        "in": "query",
                        "type": "boolean",
                        "default": false,
                        "description": "<p>Allow search in archived categories.</p>\n"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "type": "string",
                        "description": "<p>Filter the records using the supplied terms.</p>\n",
                        "x-search-filter": true
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "description": "<p>Filter the records by matching part of their name.</p>\n",
                        "x-search-filter": true
                    },
                    {
                        "name": "insertUserNames",
                        "in": "query",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "style": "form",
                        "description": "<p>Filter the records by inserted user names.</p>\n",
                        "x-search-filter": true
                    },
                    {
                        "name": "insertUserIDs",
                        "in": "query",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "style": "form",
                        "description": "<p>Filter the records by inserted userIDs.</p>\n",
                        "x-search-filter": true
                    },
                    {
                        "name": "dateInserted",
                        "in": "query",
                        "type": "object",
                        "properties": {
                            "operator": {
                                "type": "string",
                                "default": "=",
                                "enum": [
                                    "=",
                                    ">",
                                    "<",
                                    ">=",
                                    "<=",
                                    "[]",
                                    "[)",
                                    "(]",
                                    "()"
                                ]
                            },
                            "date": {
                                "type": "array",
                                "minItems": 1,
                                "mixItems": 2,
                                "items": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        },
                        "description": "<p>Filter the record by when it was inserted.<br />\nThis filter receive a string that can take two forms.<br />\nA single date that matches '{Operator}{DateTime}' where {Operator} can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to =.<br />\nA date range that matches '{Opening}{DateTime},{DateTime}{Closing}' where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'. '[]' are inclusive and '()' are exclusive.</p>\n",
                        "x-search-filter": true,
                        "x-filter": {
                            "field": "DateInserted",
                            "processor": [
                                "Vanilla\\DateFilterSchema",
                                "dateFilterField"
                            ]
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "style": "form",
                        "description": "<p>Filter discussions by matching tags.</p>\n",
                        "x-search-filter": true
                    },
                    {
                        "name": "tagOperator",
                        "in": "query",
                        "type": "string",
                        "default": "or",
                        "description": "<p>Tags search condition.<br />\nMust be one of: \"and\", \"or\".</p>\n",
                        "enum": [
                            "and",
                            "or"
                        ]
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SearchResult"
                            }
                        }
                    }
                }
            }
        },
        "/statuses": {
            "get": {
                "tags": [
                    "Statuses"
                ],
                "summary": "Get a list of idea statuses.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Status"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Statuses"
                ],
                "summary": "Create an idea status.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Status"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Status"
                        }
                    }
                }
            }
        },
        "/statuses/{id}": {
            "get": {
                "tags": [
                    "Statuses"
                ],
                "summary": "Get a single idea status.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The idea status ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Status"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Statuses"
                ],
                "summary": "Update an idea status.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Status"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Status"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Statuses"
                ],
                "summary": "Delete an idea status.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The idea status ID.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/statuses/{id}/edit": {
            "get": {
                "tags": [
                    "Statuses"
                ],
                "summary": "Get editable fields for an idea status.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The idea status ID.</p>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Status"
                        }
                    }
                }
            }
        },
        "/tokens": {
            "get": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Get a list of access token IDs for the current user.",
                "parameters": [
                    {
                        "name": "accessTokenID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "dateInserted",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Token"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Issue a new access token for the current user.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Token"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Token"
                        }
                    }
                }
            }
        },
        "/tokens/{id}": {
            "get": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Reveal a usable access token.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The numeric ID of a token.</p>\n"
                    },
                    {
                        "name": "transientKey",
                        "in": "query",
                        "type": "string",
                        "minLength": 1,
                        "description": "<p>A valid CSRF token for the current user.</p>\n",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Token"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tokens"
                ],
                "summary": "Revoke an access token.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The numeric ID of a token.</p>\n"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List users.",
                "parameters": [
                    {
                        "name": "dateInserted",
                        "in": "query",
                        "type": "object",
                        "properties": {
                            "operator": {
                                "type": "string",
                                "default": "=",
                                "enum": [
                                    "=",
                                    ">",
                                    "<",
                                    ">=",
                                    "<=",
                                    "[]",
                                    "[)",
                                    "(]",
                                    "()"
                                ]
                            },
                            "date": {
                                "type": "array",
                                "minItems": 1,
                                "mixItems": 2,
                                "items": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        },
                        "description": "<p>When the user was created.<br />\nThis filter receive a string that can take two forms.<br />\nA single date that matches '{Operator}{DateTime}' where {Operator} can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to =.<br />\nA date range that matches '{Opening}{DateTime},{DateTime}{Closing}' where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'. '[]' are inclusive and '()' are exclusive.</p>\n",
                        "x-filter": {
                            "field": "u.DateInserted",
                            "processor": [
                                "Vanilla\\DateFilterSchema",
                                "dateFilterField"
                            ]
                        }
                    },
                    {
                        "name": "dateUpdated",
                        "in": "query",
                        "type": "object",
                        "properties": {
                            "operator": {
                                "type": "string",
                                "default": "=",
                                "enum": [
                                    "=",
                                    ">",
                                    "<",
                                    ">=",
                                    "<=",
                                    "[]",
                                    "[)",
                                    "(]",
                                    "()"
                                ]
                            },
                            "date": {
                                "type": "array",
                                "minItems": 1,
                                "mixItems": 2,
                                "items": {
                                    "type": "string",
                                    "format": "date-time"
                                }
                            }
                        },
                        "description": "<p>When the user was updated.<br />\nThis filter receive a string that can take two forms.<br />\nA single date that matches '{Operator}{DateTime}' where {Operator} can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to =.<br />\nA date range that matches '{Opening}{DateTime},{DateTime}{Closing}' where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'. '[]' are inclusive and '()' are exclusive.</p>\n",
                        "x-filter": {
                            "field": "u.DateUpdated",
                            "processor": [
                                "Vanilla\\DateFilterSchema",
                                "dateFilterField"
                            ]
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "type": "array",
                        "description": "<p>One or more user IDs to lookup.</p>\n",
                        "items": {
                            "type": "integer"
                        },
                        "style": "form",
                        "x-filter": {
                            "field": "u.UserID"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "rank"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Add a user.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPost"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/users/by-names": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Search for users by full or partial name matching.",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "minLength": 1,
                        "description": "<p>Filter for username. Supports full or partial matching with appended wildcard (e.g. User*).</p>\n",
                        "required": true
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "type": "string",
                        "description": "<p>Sort method for results.<br />\nMust be one of: \"countComments\", \"dateLastActive\", \"name\", \"mention\".</p>\n",
                        "enum": [
                            "countComments",
                            "dateLastActive",
                            "name",
                            "mention"
                        ],
                        "default": "name"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Page number. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>.</p>\n",
                        "default": 1,
                        "minimum": 1
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "<p>Desired number of items per page.</p>\n",
                        "default": 30,
                        "minimum": 1,
                        "maximum": 100
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Submit a new user registration.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "An email address for this user."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "The username."
                                },
                                "password": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "A password for this user."
                                },
                                "discoveryText": {
                                    "type": "string",
                                    "description": "Why does the user wish to join? Only used when the registration is flagged as SPAM (response code: 202)."
                                }
                            },
                            "required": [
                                "email",
                                "name",
                                "password"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": [],
                                "name": [],
                                "email": []
                            },
                            "required": [
                                "userID",
                                "name",
                                "email"
                            ]
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The user ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "rank"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The user ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The user ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "rank"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/users/{id}/ban": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Ban a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "The user ID."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "banned": {
                                    "type": "boolean",
                                    "description": "Pass true to ban or false to unban."
                                }
                            },
                            "required": [
                                "banned"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "banned": {
                                    "type": "boolean",
                                    "description": "The current banned value."
                                }
                            },
                            "required": [
                                "banned"
                            ]
                        }
                    }
                }
            }
        },
        "/users/{id}/edit": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a user for editing.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "<p>The user ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "rank"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userID": {
                                    "type": "integer",
                                    "description": "ID of the user."
                                },
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Name of the user."
                                },
                                "email": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Email address of the user."
                                },
                                "photo": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "Raw photo field value from the user record."
                                },
                                "emailConfirmed": {
                                    "type": "boolean",
                                    "description": "Has the email address for this user been confirmed?"
                                },
                                "bypassSpam": {
                                    "type": "boolean",
                                    "description": "Should submissions from this user bypass SPAM checks?"
                                }
                            },
                            "required": [
                                "userID",
                                "name",
                                "email",
                                "photo",
                                "emailConfirmed",
                                "bypassSpam"
                            ]
                        }
                    }
                }
            }
        },
        "/users/{id}/photo": {
            "post": {
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "default": null,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "photo": {
                                    "$ref": "#/definitions/UploadedFile"
                                }
                            },
                            "required": [
                                "photo"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "photoUrl": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 0,
                                    "description": "URL to the user photo."
                                }
                            },
                            "required": [
                                "photoUrl"
                            ]
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user photo.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "default": null,
                        "type": "integer",
                        "description": "<p>The user ID.</p>\n"
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "<p>Expand associated records using one or more valid field names. A boolean true expands all expandable fields.</p>\n",
                        "default": false,
                        "items": {
                            "enum": [
                                "rank"
                            ],
                            "type": "string"
                        },
                        "style": "form",
                        "type": [
                            "boolean",
                            "array"
                        ]
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "/users/{id}/rank": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update the rank of a user.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "rankID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "ID of the user rank."
                                }
                            },
                            "required": [
                                "rankID"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "rankID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "ID of the user rank."
                                }
                            },
                            "required": [
                                "rankID"
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Addon": {
            "type": "object",
            "properties": {
                "addonID": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The ID of the addon used for API calls."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the addon."
                },
                "key": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The unique key that identifies the addon"
                },
                "type": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The type of addon.",
                    "enum": [
                        "addon",
                        "theme",
                        "locale"
                    ]
                },
                "description": {
                    "type": "string",
                    "description": "The addon's description"
                },
                "iconUrl": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The addon's icon.",
                    "format": "uri"
                },
                "version": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The addon's version."
                },
                "require": {
                    "type": "array",
                    "description": "An array of addons that are required to enable the addon.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "addonID": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The ID of the addon used for API calls."
                            },
                            "name": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The name of the addon."
                            },
                            "key": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The unique key that identifies the addon"
                            },
                            "type": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The type of addon.",
                                "enum": [
                                    "addon",
                                    "theme",
                                    "locale"
                                ]
                            },
                            "constraint": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The version requirement."
                            }
                        },
                        "required": [
                            "addonID",
                            "name",
                            "key",
                            "type",
                            "constraint"
                        ]
                    }
                },
                "conflict": {
                    "type": "array",
                    "description": "An array of addons that conflict with this addon.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "addonID": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The ID of the addon used for API calls."
                            },
                            "name": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The name of the addon."
                            },
                            "key": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The unique key that identifies the addon"
                            },
                            "type": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The type of addon.",
                                "enum": [
                                    "addon",
                                    "theme",
                                    "locale"
                                ]
                            },
                            "constraint": {
                                "type": "string",
                                "minLength": 1,
                                "description": "The version requirement."
                            }
                        },
                        "required": [
                            "addonID",
                            "name",
                            "key",
                            "type",
                            "constraint"
                        ]
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the addon is enabled."
                }
            },
            "required": [
                "addonID",
                "name",
                "key",
                "type",
                "iconUrl",
                "version",
                "enabled"
            ]
        },
        "Badge": {
            "type": "object",
            "properties": {
                "badgeID": {
                    "type": "integer",
                    "description": "The ID of the badge."
                },
                "type": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The type of the badge. (Differentiate custom badges from the others)"
                },
                "key": {
                    "type": "string",
                    "minLength": 1,
                    "description": "They key of the badge."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the badge."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The description of the badge."
                },
                "photoUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "The photo of the badge."
                },
                "points": {
                    "type": "integer",
                    "description": "The amount of point a badge is worth."
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Tells whether the badge is enabled or not."
                },
                "canDelete": {
                    "type": "boolean",
                    "description": "Tells whether the badge can be deleted or not. (Only custom badges can be deleted right now)"
                },
                "countUsers": {
                    "type": "integer",
                    "description": "The number of users that have earned the badge."
                },
                "class": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "The class of the badge."
                },
                "classLevel": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The class level."
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the badge."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the badge was created.",
                    "format": "date-time"
                },
                "updateUserID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The last user that updated the badge."
                },
                "updateUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateUpdated": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the badge was last updated."
                },
                "attributes": {
                    "type": [
                        "object",
                        "null"
                    ],
                    "description": "A free-form object containing all custom data for this badge."
                },
                "url": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The URL of the badge."
                }
            },
            "required": [
                "badgeID",
                "type",
                "key",
                "name",
                "body",
                "photoUrl",
                "points",
                "enabled",
                "canDelete",
                "countUsers",
                "class",
                "classLevel",
                "insertUserID",
                "dateInserted",
                "updateUserID",
                "dateUpdated",
                "attributes",
                "url"
            ]
        },
        "BadgePost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the badge."
                },
                "key": {
                    "type": "string",
                    "minLength": 1,
                    "description": "They key of the badge."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The description of the badge."
                },
                "photoUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "The photo of the badge."
                },
                "points": {
                    "type": "integer",
                    "description": "The amount of point a badge is worth."
                },
                "class": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "The class of the badge."
                },
                "classLevel": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The class level."
                },
                "enabled": {
                    "default": true,
                    "type": "boolean",
                    "description": "Tells whether the badge is enabled or not."
                }
            },
            "required": [
                "name",
                "key",
                "body",
                "points",
                "class",
                "classLevel"
            ]
        },
        "BadgeRequest": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The ID of the user."
                },
                "user": {
                    "$ref": "#/definitions/UserFragment"
                },
                "badgeID": {
                    "type": "integer",
                    "description": "The ID of the badge."
                },
                "badge": {
                    "$ref": "#/definitions/Badge"
                },
                "reasonBody": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "Reason why the user wants the badge."
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the user badge relation."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the user requested the badge.",
                    "format": "date-time"
                }
            },
            "required": [
                "userID",
                "badgeID",
                "reasonBody",
                "insertUserID",
                "dateInserted"
            ]
        },
        "BadgeRequestPost": {
            "type": "object",
            "properties": {
                "reasonBody": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "Reason why the user wants the badge."
                }
            }
        },
        "CategoryPost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the category."
                },
                "parentCategoryID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "Parent category ID."
                },
                "urlcode": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The URL code of the category."
                },
                "displayAs": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The display style of the category.",
                    "enum": [
                        "categories",
                        "discussions",
                        "flat",
                        "heading"
                    ],
                    "default": "discussions"
                },
                "customPermissions": {
                    "type": "boolean",
                    "description": "Are custom permissions set for this category?"
                }
            },
            "required": [
                "name",
                "urlcode"
            ]
        },
        "Comment": {
            "type": "object",
            "properties": {
                "commentID": {
                    "type": "integer",
                    "description": "The ID of the comment."
                },
                "discussionID": {
                    "type": "integer",
                    "description": "The ID of the discussion."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The body of the comment."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the comment was created.",
                    "format": "date-time"
                },
                "dateUpdated": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the comment was last updated."
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the comment."
                },
                "score": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "Total points associated with this post."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "url": {
                    "type": "string",
                    "description": "The full URL to the comment."
                },
                "attributes": {
                    "type": "object",
                    "properties": {
                        "answer": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "minLength": 1,
                                    "enum": [
                                        "accepted",
                                        "rejected",
                                        "pending"
                                    ],
                                    "description": "The state of the answer."
                                },
                                "dateAccepted": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When an answer was accepted."
                                },
                                "acceptUserID": {
                                    "type": [
                                        "integer",
                                        "null"
                                    ],
                                    "description": "The user that accepted this answer."
                                }
                            },
                            "required": [
                                "status",
                                "dateAccepted",
                                "acceptUserID"
                            ]
                        }
                    }
                },
                "reactions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "tagID": {
                                "type": "integer"
                            },
                            "urlcode": {
                                "type": "string",
                                "minLength": 1
                            },
                            "name": {
                                "type": "string",
                                "minLength": 1
                            },
                            "class": {
                                "type": "string",
                                "minLength": 1
                            },
                            "count": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "tagID",
                            "urlcode",
                            "name",
                            "class",
                            "count"
                        ]
                    }
                }
            },
            "required": [
                "commentID",
                "discussionID",
                "body",
                "dateInserted",
                "dateUpdated",
                "insertUserID",
                "score",
                "attributes"
            ]
        },
        "CommentGet": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The comment ID."
                },
                "expand": {
                    "description": "Expand associated records using one or more valid field names. A boolean true expands all expandable fields.",
                    "default": false,
                    "items": {
                        "enum": [
                            "reactions"
                        ],
                        "type": "string"
                    },
                    "style": "form",
                    "type": [
                        "boolean",
                        "array"
                    ]
                }
            },
            "required": [
                "id"
            ]
        },
        "CommentPost": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The body of the comment."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the comment."
                },
                "discussionID": {
                    "type": "integer",
                    "description": "The ID of the discussion."
                }
            },
            "required": [
                "body",
                "format",
                "discussionID"
            ]
        },
        "Conversation": {
            "type": "object",
            "properties": {
                "conversationID": {
                    "type": "integer",
                    "description": "The ID of the conversation."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the conversation."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The most recent unread message in the conversation."
                },
                "url": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The URL of the conversation."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the conversation was created.",
                    "format": "date-time"
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the conversation."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "countParticipants": {
                    "type": "integer",
                    "description": "The number of participants on the conversation."
                },
                "participants": {
                    "$ref": "#/definitions/ConversationParticipants"
                },
                "countMessages": {
                    "type": "integer",
                    "description": "The number of messages on the conversation."
                },
                "unread": {
                    "type": "boolean",
                    "description": "Whether the conversation has an unread indicator."
                },
                "countUnread": {
                    "type": "integer",
                    "description": "The number of unread messages."
                },
                "lastMessage": {
                    "type": "object",
                    "properties": {
                        "insertUserID": {
                            "type": "integer",
                            "description": "The author of the your most recent message."
                        },
                        "dateInserted": {
                            "type": "string",
                            "description": "The date of the message.",
                            "format": "date-time"
                        },
                        "insertUser": {
                            "$ref": "#/definitions/UserFragment"
                        }
                    },
                    "required": [
                        "insertUserID",
                        "dateInserted",
                        "insertUser"
                    ]
                }
            },
            "required": [
                "conversationID",
                "name",
                "body",
                "url",
                "dateInserted",
                "insertUserID",
                "countParticipants",
                "countMessages"
            ]
        },
        "ConversationParticipants": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "userID": {
                        "type": "integer",
                        "description": "The userID of the participant."
                    },
                    "user": {
                        "$ref": "#/definitions/UserFragment"
                    },
                    "status": {
                        "description": "Participation status of the user.",
                        "type": "string",
                        "enum": [
                            "participating",
                            "deleted"
                        ]
                    }
                },
                "required": [
                    "userID",
                    "status"
                ]
            },
            "description": "List of participants."
        },
        "ConversationPost": {
            "type": "object",
            "properties": {
                "participantUserIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of userID of the participants."
                }
            },
            "required": [
                "participantUserIDs"
            ]
        },
        "Discussion": {
            "type": "object",
            "properties": {
                "discussionID": {
                    "type": "integer",
                    "description": "The ID of the discussion."
                },
                "type": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "The type of this discussion if any."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The title of the discussion."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The body of the discussion."
                },
                "categoryID": {
                    "type": "integer",
                    "description": "The category the discussion is in."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the discussion was created.",
                    "format": "date-time"
                },
                "dateUpdated": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the discussion was last updated."
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the discussion."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "lastUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "pinned": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been pinned."
                },
                "pinLocation": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "enum": [
                        "category",
                        "recent"
                    ],
                    "description": "The location for the discussion, if pinned. \"category\" are pinned to their own category. \"recent\" are pinned to the recent discussions list, as well as their own category."
                },
                "closed": {
                    "type": "boolean",
                    "description": "Whether the discussion is closed or open."
                },
                "sink": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been sunk."
                },
                "countComments": {
                    "type": "integer",
                    "description": "The number of comments on the discussion."
                },
                "countViews": {
                    "type": "integer",
                    "description": "The number of views on the discussion."
                },
                "score": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "Total points associated with this post."
                },
                "url": {
                    "type": "string",
                    "description": "The full URL to the discussion."
                },
                "lastPost": {
                    "$ref": "#/definitions/PostFragment"
                },
                "bookmarked": {
                    "type": "boolean",
                    "description": "Whether or not the discussion is bookmarked by the current user."
                },
                "unread": {
                    "type": "boolean",
                    "description": "Whether or not the discussion should have an unread indicator."
                },
                "countUnread": {
                    "type": "integer",
                    "description": "The number of unread comments."
                },
                "attributes": {
                    "type": "object",
                    "properties": {
                        "question": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "minLength": 1,
                                    "enum": [
                                        "unanswered",
                                        "answered",
                                        "accepted",
                                        "rejected"
                                    ],
                                    "description": "The answering state of the question."
                                },
                                "dateAccepted": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When an answer was accepted."
                                },
                                "dateAnswered": {
                                    "type": [
                                        "datetime",
                                        "null"
                                    ],
                                    "description": "When the last answer was inserted."
                                }
                            },
                            "required": [
                                "status",
                                "dateAccepted",
                                "dateAnswered"
                            ]
                        },
                        "idea": {
                            "type": "object",
                            "properties": {
                                "statusNotes": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "minLength": 1,
                                    "description": "Status update notes."
                                },
                                "statusID": {
                                    "type": "integer",
                                    "description": "Unique numeric ID of a status."
                                },
                                "status": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 1,
                                            "description": "Label for the status."
                                        },
                                        "state": {
                                            "type": "string",
                                            "minLength": 1,
                                            "description": "The open/closed state of an idea.",
                                            "enum": [
                                                "open",
                                                "closed"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "state"
                                    ]
                                },
                                "type": {
                                    "type": "string",
                                    "minLength": 1,
                                    "description": "Voting type for this idea: up-only or up and down.",
                                    "enum": [
                                        "up",
                                        "up-down"
                                    ]
                                }
                            },
                            "required": [
                                "statusNotes",
                                "statusID",
                                "status",
                                "type"
                            ]
                        }
                    }
                },
                "reactions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "tagID": {
                                "type": "integer"
                            },
                            "urlcode": {
                                "type": "string",
                                "minLength": 1
                            },
                            "name": {
                                "type": "string",
                                "minLength": 1
                            },
                            "class": {
                                "type": "string",
                                "minLength": 1
                            },
                            "count": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "tagID",
                            "urlcode",
                            "name",
                            "class",
                            "count"
                        ]
                    }
                },
                "groupID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The group the discussion is in."
                }
            },
            "required": [
                "discussionID",
                "type",
                "name",
                "body",
                "categoryID",
                "dateInserted",
                "dateUpdated",
                "insertUserID",
                "pinLocation",
                "closed",
                "sink",
                "countComments",
                "countViews",
                "score",
                "bookmarked",
                "unread",
                "attributes"
            ]
        },
        "DiscussionGetEdit": {
            "type": "object",
            "properties": {
                "discussionID": {
                    "type": "integer",
                    "description": "The ID of the discussion."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The title of the discussion."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The body of the discussion."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the discussion."
                },
                "categoryID": {
                    "type": "integer",
                    "description": "The category the discussion is in."
                },
                "sink": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been sunk."
                },
                "closed": {
                    "type": "boolean",
                    "description": "Whether the discussion is closed or open."
                },
                "pinned": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been pinned."
                },
                "pinLocation": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "enum": [
                        "category",
                        "recent"
                    ],
                    "description": "The location for the discussion, if pinned. \"category\" are pinned to their own category. \"recent\" are pinned to the recent discussions list, as well as their own category."
                },
                "groupID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The group the discussion is in."
                }
            },
            "required": [
                "discussionID",
                "name",
                "body",
                "format",
                "categoryID",
                "sink",
                "closed",
                "pinned",
                "pinLocation"
            ]
        },
        "DiscussionPost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The title of the discussion."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The body of the discussion."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the discussion."
                },
                "categoryID": {
                    "type": "integer",
                    "description": "The category the discussion is in."
                },
                "closed": {
                    "type": "boolean",
                    "description": "Whether the discussion is closed or open."
                },
                "sink": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been sunk."
                },
                "pinned": {
                    "type": "boolean",
                    "description": "Whether or not the discussion has been pinned."
                },
                "pinLocation": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "enum": [
                        "category",
                        "recent"
                    ],
                    "description": "The location for the discussion, if pinned. \"category\" are pinned to their own category. \"recent\" are pinned to the recent discussions list, as well as their own category."
                },
                "groupID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The group the discussion is in."
                }
            },
            "required": [
                "name",
                "body",
                "format"
            ]
        },
        "DraftPost": {
            "type": "object",
            "properties": {
                "recordType": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The type of record associated with this draft.",
                    "enum": [
                        "comment",
                        "discussion"
                    ]
                },
                "parentRecordID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The unique ID of the intended parent to this record."
                },
                "attributes": {
                    "type": "object",
                    "description": "A free-form object containing all custom data for this draft."
                }
            },
            "required": [
                "recordType",
                "attributes"
            ]
        },
        "Event": {
            "type": "object",
            "properties": {
                "eventID": {
                    "type": "integer",
                    "description": "The ID of the event."
                },
                "userID": {
                    "type": "integer",
                    "description": "The user ID of the participant."
                },
                "user": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the event was created.",
                    "format": "date-time"
                },
                "attending": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "enum": [
                        "yes",
                        "no",
                        "maybe"
                    ],
                    "description": "Is the participant attending the event."
                }
            },
            "required": [
                "eventID",
                "userID",
                "dateInserted",
                "attending"
            ]
        },
        "EventPost": {
            "type": "object",
            "properties": {
                "groupID": {
                    "type": "integer",
                    "description": "The group the event is in."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the event."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The description of the event."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the event."
                },
                "location": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "The location of the event."
                },
                "dateStarts": {
                    "type": "string",
                    "description": "When the event starts.",
                    "format": "date-time"
                },
                "dateEnds": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the event ends."
                }
            },
            "required": [
                "groupID",
                "name",
                "body",
                "format",
                "location",
                "dateStarts"
            ]
        },
        "Group": {
            "type": "object",
            "properties": {
                "groupID": {
                    "type": "integer",
                    "description": "The ID of the group."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the group."
                },
                "description": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The description of the group."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the group."
                },
                "iconUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "The URL of the icon of the group."
                },
                "bannerUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "The URL of the banner of the group."
                },
                "privacy": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "public",
                        "private"
                    ],
                    "description": "The privacy level of the group's content."
                }
            },
            "required": [
                "groupID",
                "name",
                "description",
                "format",
                "iconUrl",
                "bannerUrl",
                "privacy"
            ]
        },
        "GroupApplicant": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The user ID of the applicant."
                },
                "user": {
                    "$ref": "#/definitions/UserFragment"
                },
                "status": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "approved",
                        "denied",
                        "pending"
                    ],
                    "description": "The status of the applicant."
                },
                "reason": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The reason why the applicant wants to join the group."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Universal record field. Content of \"reason\"."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the applicant was created.",
                    "format": "date-time"
                }
            },
            "required": [
                "userID",
                "status",
                "reason",
                "body",
                "dateInserted"
            ]
        },
        "GroupInvite": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The ID of the user that has been invited."
                },
                "user": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the invite was issued.",
                    "format": "date-time"
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the invite."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                }
            },
            "required": [
                "userID",
                "dateInserted",
                "insertUserID"
            ]
        },
        "GroupMember": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The user ID of the member of the group."
                },
                "user": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the user was added to the group.",
                    "format": "date-time"
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that added this user to the group."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "role": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "leader",
                        "member"
                    ],
                    "description": "The role of the user for that group."
                }
            },
            "required": [
                "userID",
                "dateInserted",
                "insertUserID",
                "role"
            ]
        },
        "GroupPost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the group."
                },
                "description": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The description of the group."
                },
                "format": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The input format of the group."
                },
                "iconUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "The URL of the icon of the group."
                },
                "bannerUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "The URL of the banner of the group."
                },
                "privacy": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "public",
                        "private"
                    ],
                    "description": "The privacy level of the group's content."
                }
            },
            "required": [
                "name",
                "description",
                "format",
                "privacy"
            ]
        },
        "Message": {
            "type": "object",
            "properties": {
                "messageID": {
                    "type": "integer",
                    "description": "The ID of the message."
                },
                "conversationID": {
                    "type": "integer",
                    "description": "The ID of the conversation."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 2000,
                    "description": "The body of the message."
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the message."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the message was created.",
                    "format": "date-time"
                }
            },
            "required": [
                "messageID",
                "conversationID",
                "body",
                "insertUserID",
                "dateInserted"
            ]
        },
        "MessagePost": {
            "type": "object",
            "properties": {
                "conversationID": {
                    "type": "integer",
                    "description": "The ID of the conversation."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 2000,
                    "description": "The body of the message."
                },
                "format": {
                    "type": "string",
                    "description": "The input format of the record."
                }
            },
            "required": [
                "conversationID",
                "body"
            ]
        },
        "PermissionFragment": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "global",
                        "category"
                    ]
                },
                "permissions": {
                    "type": "object"
                }
            },
            "required": [
                "type",
                "permissions"
            ]
        },
        "PollGetEdit": {
            "type": "object",
            "properties": {
                "pollID": {
                    "type": "integer",
                    "description": "The unique ID of the poll."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the poll."
                },
                "discussionID": {
                    "type": "integer",
                    "description": "The discussion the poll is displayed in."
                }
            },
            "required": [
                "pollID",
                "name",
                "discussionID"
            ]
        },
        "PollOptionPost": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the option."
                }
            },
            "required": [
                "body"
            ]
        },
        "PollPost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The name of the poll."
                },
                "discussionID": {
                    "type": "integer",
                    "description": "The discussion the poll is displayed in."
                }
            },
            "required": [
                "name",
                "discussionID"
            ]
        },
        "PollVotePost": {
            "type": "object",
            "properties": {
                "userID": {
                    "description": "The user that made the vote"
                },
                "pollOptionID": {
                    "type": "integer",
                    "description": "The unique ID of the option."
                }
            },
            "required": [
                "pollOptionID"
            ]
        },
        "PostFragment": {
            "type": "object",
            "properties": {
                "discussionID": {
                    "type": "integer",
                    "description": "The discussion ID of the post."
                },
                "commentID": {
                    "type": "integer",
                    "description": "The comment ID of the post, if any."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The title of the post."
                },
                "url": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The URL of the post."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "The date of the post.",
                    "format": "date-time"
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The author of the post."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                }
            },
            "required": [
                "name",
                "url",
                "dateInserted",
                "insertUserID"
            ]
        },
        "RankPost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the rank."
                },
                "userTitle": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Label that will display beside the user."
                },
                "level": {
                    "type": "integer",
                    "description": "Level of the rank. Determines the sort order."
                },
                "notificationBody": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Message for the users when they earn this rank."
                },
                "cssClass": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "Custom CSS class for users of this rank."
                },
                "criteria": {
                    "type": "object",
                    "properties": {
                        "points": {
                            "type": "integer",
                            "description": "User points."
                        },
                        "time": {
                            "type": "string",
                            "description": "Age of user account (e.g. 1 day, 3 weeks, 1 month)."
                        },
                        "posts": {
                            "type": "integer",
                            "description": "Total posts created by the user."
                        },
                        "roleID": {
                            "type": "integer",
                            "description": "ID of a role required for this rank."
                        },
                        "permission": {
                            "type": "string",
                            "description": "Permission slug.",
                            "enum": [
                                "site.manage",
                                "community.moderate"
                            ]
                        },
                        "manual": {
                            "type": "boolean",
                            "description": "Allow manually granting this rank."
                        }
                    }
                },
                "abilities": {
                    "type": "object",
                    "properties": {
                        "discussionsAdd": {
                            "type": "boolean",
                            "enum": [
                                false
                            ],
                            "description": "Allow starting discussions."
                        },
                        "commentsAdd": {
                            "type": "boolean",
                            "enum": [
                                false
                            ],
                            "description": "Allow adding comments."
                        },
                        "conversationsAdd": {
                            "type": "boolean",
                            "description": "Allow starting conversations."
                        },
                        "verified": {
                            "type": "boolean",
                            "description": "Verified status. true is verified. false requires verification."
                        },
                        "format": {
                            "type": "string",
                            "description": "Formatting restrictions.",
                            "enum": [
                                "Text",
                                "TextEx"
                            ]
                        },
                        "linksActivity": {
                            "type": "boolean",
                            "enum": [
                                false
                            ],
                            "description": "Allow links in activity feed."
                        },
                        "linksConversations": {
                            "type": "boolean",
                            "enum": [
                                false
                            ],
                            "description": "Allow links in conversations."
                        },
                        "linksPosts": {
                            "type": "boolean",
                            "enum": [
                                false
                            ],
                            "description": "Allow links in posts."
                        },
                        "title": {
                            "type": "boolean",
                            "description": "Allow user to have a title."
                        },
                        "location": {
                            "type": "boolean",
                            "description": "Allow user to have a location."
                        },
                        "avatar": {
                            "type": "boolean",
                            "description": "Allow user to have a custom avatar."
                        },
                        "signature": {
                            "type": "boolean",
                            "description": "Allow user to have a signature."
                        },
                        "signatureImages": {
                            "type": "integer",
                            "description": "Maximum number of images in a signature. -1 for no limit."
                        },
                        "signatureLength": {
                            "type": "integer",
                            "description": "Maximum length of a signature."
                        },
                        "polls": {
                            "type": "boolean",
                            "description": "Allow creation of polls."
                        },
                        "meActions": {
                            "type": "boolean",
                            "description": "Allow usage of \"me actions\"."
                        },
                        "curation": {
                            "type": "boolean",
                            "description": "Allow content curation."
                        },
                        "editTimeout": {
                            "type": "integer",
                            "description": "Length of time, in seconds, a user can edit their post. -1 for no limit."
                        },
                        "roleID": {
                            "type": "integer",
                            "description": "Permissions of this role are applied to users with the rank."
                        }
                    }
                }
            },
            "required": [
                "name",
                "userTitle",
                "level"
            ]
        },
        "ReactionType": {
            "type": "object",
            "properties": {
                "urlCode": {
                    "type": "string",
                    "minLength": 1,
                    "description": "A URL-safe identifier."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "A user-friendly name."
                },
                "description": {
                    "type": "string",
                    "minLength": 1,
                    "description": "A user-friendly description."
                },
                "points": {
                    "type": "integer",
                    "description": "Reputation points to be applied along with this reaction."
                },
                "class": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "The classification of the type. Directly maps to permissions."
                },
                "tagID": {
                    "type": "integer",
                    "description": "The numeric ID of the tag associated with the type."
                },
                "attributes": {
                    "type": [
                        "object",
                        "null"
                    ],
                    "description": "Metadata."
                },
                "sort": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "Display order when listing types."
                },
                "active": {
                    "type": "boolean",
                    "description": "Is this type available for use?"
                },
                "custom": {
                    "type": "boolean",
                    "description": "Is this a non-standard type?"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Should this type be hidden from the UI?"
                }
            },
            "required": [
                "urlCode",
                "name",
                "description",
                "points",
                "class",
                "tagID",
                "attributes",
                "sort",
                "active",
                "custom",
                "hidden"
            ]
        },
        "Role": {
            "type": "object",
            "properties": {
                "roleID": {
                    "type": "integer",
                    "description": "ID of the role."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the role."
                },
                "description": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Description of the role."
                },
                "type": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Default type of this role."
                },
                "deletable": {
                    "type": "boolean",
                    "description": "Is the role deletable?"
                },
                "canSession": {
                    "type": "boolean",
                    "description": "Can users in this role start a session?"
                },
                "personalInfo": {
                    "type": "boolean",
                    "description": "Is membership in this role personal information?"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PermissionFragment"
                    }
                }
            },
            "required": [
                "roleID",
                "name",
                "description",
                "type",
                "deletable",
                "canSession",
                "personalInfo"
            ]
        },
        "RoleFragment": {
            "type": "object",
            "properties": {
                "roleID": {
                    "type": "integer",
                    "description": "ID of the role."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the role."
                }
            },
            "required": [
                "roleID",
                "name"
            ]
        },
        "RolePost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the role."
                },
                "description": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Description of the role."
                },
                "type": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Default type of this role."
                },
                "deletable": {
                    "type": "boolean",
                    "description": "Is the role deletable?"
                },
                "canSession": {
                    "type": "boolean",
                    "description": "Can users in this role start a session?"
                },
                "personalInfo": {
                    "type": "boolean",
                    "description": "Is membership in this role personal information?"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PermissionFragment"
                    }
                }
            },
            "required": [
                "name"
            ]
        },
        "SearchResult": {
            "type": "object",
            "properties": {
                "recordID": {
                    "type": "integer",
                    "description": "The identifier of the record."
                },
                "recordType": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "discussion",
                        "comment",
                        "group"
                    ],
                    "description": "The main type of record."
                },
                "type": {
                    "type": "string",
                    "minLength": 1,
                    "enum": [
                        "discussion",
                        "comment",
                        "question",
                        "group"
                    ],
                    "description": "Sub-type of the discussion."
                },
                "discussionID": {
                    "type": "integer",
                    "description": "The id of the discussion."
                },
                "commentID": {
                    "type": "integer",
                    "description": "The id of the comment."
                },
                "categoryID": {
                    "type": "integer",
                    "description": "The category containing the record."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The title of the record. A comment would be \"RE: {DiscussionTitle}\"."
                },
                "body": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The content of the record."
                },
                "score": {
                    "type": "integer",
                    "description": "Score of the record."
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the record."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the record was created.",
                    "format": "date-time"
                },
                "updateUserID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The user that updated the record."
                },
                "dateUpdated": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the user was updated."
                },
                "groupID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "The id of the group or the id of the group containing the record."
                }
            },
            "required": [
                "recordID",
                "recordType",
                "type",
                "name",
                "body",
                "score",
                "insertUserID",
                "dateInserted",
                "updateUserID",
                "dateUpdated"
            ]
        },
        "Status": {
            "type": "object",
            "properties": {
                "statusID": {
                    "type": "integer",
                    "description": "Unique numeric ID of a status."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Label for the status."
                },
                "state": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The open/closed state of an idea.",
                    "enum": [
                        "Open",
                        "Closed"
                    ]
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is this the default status?"
                }
            },
            "required": [
                "statusID",
                "name",
                "state",
                "isDefault"
            ]
        },
        "Token": {
            "type": "object",
            "properties": {
                "accessTokenID": {
                    "type": "integer",
                    "description": "The unique numeric ID."
                },
                "name": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "A user-specified label."
                },
                "accessToken": {
                    "type": "string",
                    "minLength": 1,
                    "description": "A signed version of the token."
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the token was generated.",
                    "format": "date-time"
                }
            },
            "required": [
                "accessTokenID",
                "name",
                "accessToken",
                "dateInserted"
            ]
        },
        "UploadedFile": {
            "type": "string",
            "format": "binary"
        },
        "User": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "ID of the user."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the user."
                },
                "email": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Email address of the user."
                },
                "photoUrl": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "URL to the user photo."
                },
                "emailConfirmed": {
                    "type": "boolean",
                    "description": "Has the email address for this user been confirmed?"
                },
                "showEmail": {
                    "type": "boolean",
                    "description": "Is the email address visible to other users?"
                },
                "bypassSpam": {
                    "type": "boolean",
                    "description": "Should submissions from this user bypass SPAM checks?"
                },
                "banned": {
                    "type": "integer",
                    "description": "Is the user banned?"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the user was created.",
                    "format": "date-time"
                },
                "dateUpdated": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the user was last updated."
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoleFragment"
                    }
                },
                "rankID": {
                    "type": [
                        "integer",
                        "null"
                    ],
                    "description": "ID of the user rank."
                },
                "rank": {
                    "type": "object",
                    "properties": {
                        "rankID": {
                            "type": "integer",
                            "description": "Rank ID."
                        },
                        "name": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Name of the rank."
                        },
                        "userTitle": {
                            "type": "string",
                            "minLength": 1,
                            "description": "Label that will display beside the user."
                        }
                    },
                    "required": [
                        "rankID",
                        "name",
                        "userTitle"
                    ]
                }
            },
            "required": [
                "userID",
                "name",
                "email",
                "photoUrl",
                "emailConfirmed",
                "showEmail",
                "bypassSpam",
                "banned",
                "dateInserted",
                "dateUpdated",
                "rankID"
            ]
        },
        "UserBadge": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The ID of the user."
                },
                "user": {
                    "$ref": "#/definitions/UserFragment"
                },
                "badgeID": {
                    "type": "integer",
                    "description": "The ID of the badge."
                },
                "badge": {
                    "$ref": "#/definitions/Badge"
                },
                "reasonBody": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "Reason why the badge was given to the user."
                },
                "dateEarned": {
                    "type": [
                        "datetime",
                        "null"
                    ],
                    "description": "When the badge was earned."
                },
                "insertUserID": {
                    "type": "integer",
                    "description": "The user that created the user badge relation."
                },
                "insertUser": {
                    "$ref": "#/definitions/UserFragment"
                },
                "dateInserted": {
                    "type": "string",
                    "description": "When the user badge relation was created.",
                    "format": "date-time"
                }
            },
            "required": [
                "userID",
                "badgeID",
                "reasonBody",
                "dateEarned",
                "insertUserID",
                "dateInserted"
            ]
        },
        "UserBadgePost": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The ID of the user."
                },
                "reasonBody": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 1,
                    "description": "Reason why the badge was given to the user."
                }
            },
            "required": [
                "userID"
            ]
        },
        "UserFragment": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "integer",
                    "description": "The ID of the user."
                },
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The username of the user."
                },
                "photoUrl": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The URL of the user's avatar picture."
                }
            },
            "required": [
                "userID",
                "name",
                "photoUrl"
            ]
        },
        "UserPatch": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the user."
                },
                "email": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Email address of the user."
                },
                "photo": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Raw photo field value from the user record."
                },
                "emailConfirmed": {
                    "type": "boolean",
                    "description": "Has the email address for this user been confirmed?"
                },
                "bypassSpam": {
                    "type": "boolean",
                    "description": "Should submissions from this user bypass SPAM checks?"
                },
                "roleID": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Roles to set on the user."
                }
            }
        },
        "UserPost": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name of the user."
                },
                "email": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Email address of the user."
                },
                "photo": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "minLength": 0,
                    "description": "Raw photo field value from the user record."
                },
                "password": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Password of the user."
                },
                "emailConfirmed": {
                    "default": true,
                    "type": "boolean",
                    "description": "Has the email address for this user been confirmed?"
                },
                "bypassSpam": {
                    "default": false,
                    "type": "boolean",
                    "description": "Should submissions from this user bypass SPAM checks?"
                },
                "roleID": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Roles to set on the user."
                }
            },
            "required": [
                "name",
                "email",
                "password",
                "emailConfirmed",
                "bypassSpam"
            ]
        }
    }
}
